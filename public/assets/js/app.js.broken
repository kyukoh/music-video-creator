/**
 * Music Video Creator - Main JavaScript Application
 */

// グローバル状態管理
const AppState = {
    currentProject: null,
    currentScene: null,
    isLoading: false,
    sidebarOpen: false
};

// API ユーティリティ
const API = {
    async get(url, params = {}) {
        try {
            const queryString = new URLSearchParams(params).toString();
            const fullUrl = queryString ? `${url}?${queryString}` : url;
            
            console.log('API.get:', fullUrl);
            
            const response = await fetch(fullUrl, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const text = await response.text();
            console.log('API response text:', text);
            
            try {
                return JSON.parse(text);
            } catch (e) {
                console.error('Failed to parse JSON:', e, 'Raw text:', text);
                return { success: false, error: { message: 'Invalid JSON response' } };
            }
        } catch (error) {
            console.error('API.get error:', error);
            return { success: false, error: { message: error.message } };
        }
    },
    
    async post(url, data = {}) {
        try {
            console.log('API.post:', url, data);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            const text = await response.text();
            console.log('API POST response text:', text);
            
            try {
                return JSON.parse(text);
            } catch (e) {
                console.error('Failed to parse JSON:', e, 'Raw text:', text);
                return { success: false, error: { message: 'Invalid JSON response' } };
            }
        } catch (error) {
            console.error('API.post error:', error);
            return { success: false, error: { message: error.message } };
        }
    },
    
    async put(url, data = {}) {
        try {
            console.log('API.put:', url, data);
            
            const response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            const text = await response.text();
            console.log('API PUT response text:', text);
            
            try {
                return JSON.parse(text);
            } catch (e) {
                console.error('Failed to parse JSON:', e, 'Raw text:', text);
                return { success: false, error: { message: 'Invalid JSON response' } };
            }
        } catch (error) {
            console.error('API.put error:', error);
            return { success: false, error: { message: error.message } };
        }
    },
    
    async delete(url, params = {}) {
        try {
            const queryString = new URLSearchParams(params).toString();
            const fullUrl = queryString ? `${url}?${queryString}` : url;
            
            console.log('API.delete:', fullUrl);
            
            const response = await fetch(fullUrl, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const text = await response.text();
            console.log('API DELETE response text:', text);
            
            try {
                return JSON.parse(text);
            } catch (e) {
                console.error('Failed to parse JSON:', e, 'Raw text:', text);
                return { success: false, error: { message: 'Invalid JSON response' } };
            }
        } catch (error) {
            console.error('API.delete error:', error);
            return { success: false, error: { message: error.message } };
        }
    }
};

// ユーティリティ関数
const Utils = {
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    formatFileSize(bytes) {
        const units = ['B', 'KB', 'MB', 'GB'];
        let unitIndex = 0;
        
        while (bytes >= 1024 && unitIndex < units.length - 1) {
            bytes /= 1024;
            unitIndex++;
        }
        
        return Math.round(bytes * 100) / 100 + ' ' + units[unitIndex];
    },
    
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ja-JP') + ' ' + date.toLocaleTimeString('ja-JP');
    }
};

// ローディング管理
const Loading = {
    show(message = '読み込み中...') {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            const messageElement = overlay.querySelector('span');
            if (messageElement) {
                messageElement.textContent = message;
            }
            overlay.classList.remove('hidden');
        }
        AppState.isLoading = true;
    },
    
    hide() {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            overlay.classList.add('hidden');
        }
        AppState.isLoading = false;
    }
};

// 通知管理
const Notification = {
    show(message, type = 'info', duration = 5000) {
        const container = document.getElementById('notification-container');
        if (!container) return;
        
        const notification = document.createElement('div');
        notification.className = `notification ${type} flex items-center justify-between`;
        notification.innerHTML = `
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    ${this.getIcon(type)}
                </svg>
                <span>${Utils.escapeHtml(message)}</span>
            </div>
            <button class="ml-4 text-white hover:text-gray-200 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        `;
        
        // 閉じるボタンのイベント
        notification.querySelector('button').addEventListener('click', () => {
            this.remove(notification);
        });
        
        container.appendChild(notification);
        
        // 自動削除
        if (duration > 0) {
            setTimeout(() => {
                this.remove(notification);
            }, duration);
        }
    },
    
    success(message, duration = 5000) {
        this.show(message, 'success', duration);
    },
    
    error(message, duration = 8000) {
        this.show(message, 'error', duration);
    },
    
    warning(message, duration = 6000) {
        this.show(message, 'warning', duration);
    },
    
    info(message, duration = 5000) {
        this.show(message, 'info', duration);
    },
    
    remove(notification) {
        notification.style.animation = 'slideOut 0.3s ease-in-out';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    },
    
    getIcon(type) {
        const icons = {
            success: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>',
            error: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>',
            warning: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>',
            info: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'
        };
        return icons[type] || icons.info;
    }
};

// モーダル管理
const Modal = {
    create(title, content, maxWidth = 'max-w-2xl') {
        const modalContainer = document.getElementById('modal-container');
        if (!modalContainer) return null;
        
        const modalHTML = `
            <div class="modal-backdrop fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                <div class="modal-content bg-white rounded-lg shadow-xl ${maxWidth} w-full max-h-screen overflow-y-auto">
                    <div class="modal-header flex items-center justify-between p-6 border-b border-gray-200">
                        <h2 class="text-xl font-semibold text-gray-900">${title}</h2>
                        <button class="modal-close text-gray-400 hover:text-gray-600 transition-colors">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="modal-body p-6">
                        ${content}
                    </div>
                </div>
            </div>
        `;
        
        modalContainer.innerHTML = modalHTML;
        modalContainer.classList.remove('hidden');
        
        // 閉じるボタンのイベント
        const closeBtn = modalContainer.querySelector('.modal-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.close());
        }
        
        // 背景クリックで閉じる
        const backdrop = modalContainer.querySelector('.modal-backdrop');
        if (backdrop) {
            backdrop.addEventListener('click', (e) => {
                if (e.target === backdrop) {
                    this.close();
                }
            });
        }
        
        // ESCキーで閉じる
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                this.close();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
        
        return modalContainer;
    },
    
    close() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.classList.add('hidden');
            modalContainer.innerHTML = '';
        }
    }
};

// アプリケーション初期化
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded - Starting app initialization');
    
    // UI初期化
    console.log('Initializing UI...');
    initializeUI();
    
    // プロジェクト一覧の読み込み
    console.log('Loading project list...');
    loadProjectList();
    
    // エクスポート/インポートボタンのイベントリスナー
    console.log('Initializing export/import...');
    initializeExportImport();
    
    console.log('App initialization complete');
});

/**
 * UI初期化
 */
function initializeUI() {
    // モバイルメニューの初期化
    initializeMobileMenu();
    
    // イベントリスナーの設定
    setupEventListeners();
    
    // レスポンシブ対応
    handleResize();
    window.addEventListener('resize', handleResize);
}

/**
 * モバイルメニューの初期化
 */
function initializeMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.getElementById('sidebar');
    
    if (mobileMenuBtn) {
        mobileMenuBtn.addEventListener('click', toggleSidebar);
    }
    
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', toggleSidebar);
    }
    
    // サイドバー外クリックで閉じる
    document.addEventListener('click', function(e) {
        if (AppState.sidebarOpen && 
            sidebar && !sidebar.contains(e.target) && 
            mobileMenuBtn && !mobileMenuBtn.contains(e.target)) {
            closeSidebar();
        }
    });
}

/**
 * イベントリスナーの設定
 */
function setupEventListeners() {
    // 新規プロジェクトボタン
    const newProjectBtn = document.getElementById('new-project-btn');
    const getStartedBtn = document.getElementById('get-started-btn');
    
    if (newProjectBtn) {
        newProjectBtn.addEventListener('click', showCreateProjectModal);
    }
    
    if (getStartedBtn) {
        getStartedBtn.addEventListener('click', showCreateProjectModal);
    }
}

/**
 * レスポンシブ対応
 */
function handleResize() {
    const sidebar = document.getElementById('sidebar');
    const width = window.innerWidth;
    
    if (width >= 768 && sidebar) {
        // デスクトップ表示
        sidebar.classList.remove('open');
        AppState.sidebarOpen = false;
        removeSidebarOverlay();
    }
}

/**
 * サイドバーの開閉
 */
function toggleSidebar() {
    if (AppState.sidebarOpen) {
        closeSidebar();
    } else {
        openSidebar();
    }
}

function openSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) {
        sidebar.classList.add('open');
        AppState.sidebarOpen = true;
        
        // オーバーレイを追加（モバイル時）
        if (window.innerWidth < 768) {
            addSidebarOverlay();
        }
    }
}

function closeSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) {
        sidebar.classList.remove('open');
        AppState.sidebarOpen = false;
        removeSidebarOverlay();
    }
}

function addSidebarOverlay() {
    if (!document.getElementById('sidebar-overlay')) {
        const overlay = document.createElement('div');
        overlay.id = 'sidebar-overlay';
        overlay.className = 'fixed inset-0 bg-black bg-opacity-50 z-25';
        overlay.addEventListener('click', closeSidebar);
        document.body.appendChild(overlay);
    }
}

function removeSidebarOverlay() {
    const overlay = document.getElementById('sidebar-overlay');
    if (overlay) {
        overlay.remove();
    }
}

async function loadProjectList() {
    console.log('Loading project list...');
    try {
        Loading.show();
        console.log('Fetching from api/projects.php');
        const response = await API.get('api/projects.php');
        console.log('API response:', response);
        
        if (response.success) {
            renderProjectList(response.data || []);
            Notification.success('プロジェクト一覧を読み込みました');
        } else {
            console.error('API error:', response);
            throw new Error(response.error?.message || 'プロジェクト一覧の読み込みに失敗しました');
        }
    } catch (error) {
        console.error('loadProjectList error:', error);
        Notification.error('プロジェクト一覧の読み込みに失敗しました');
        renderProjectList([]);
    } finally {
        Loading.hide();
    }
}

/**
 * プロジェクト一覧の描画
 */
function renderProjectList(projects) {
    const projectList = document.getElementById('project-list');
    
    if (!projects || projects.length === 0) {
        projectList.innerHTML = `
            <div class="text-center text-gray-400 py-8">
                <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <p class="text-sm">プロジェクトがありません</p>
            </div>
        `;
        return;
    }
    
    const projectsHTML = projects.map(project => `
        <div class="project-item" data-project-id="${project.id}">
            <div class="flex items-center justify-between">
                <div class="flex-1 min-w-0">
                    <h3 class="text-sm font-medium text-gray-900 truncate">${Utils.escapeHtml(project.name)}</h3>
                    ${project.notes ? `<p class="text-xs text-gray-500 truncate mt-1">${Utils.escapeHtml(project.notes)}</p>` : ''}
                </div>
                <div class="flex items-center space-x-1 ml-2">
                    <button class="edit-project-btn p-1 text-gray-400 hover:text-gray-600 transition-colors" data-project-id="${project.id}" title="編集">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                    </button>
                    <button class="delete-project-btn p-1 text-gray-400 hover:text-red-600 transition-colors" data-project-id="${project.id}" title="削除">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    `).join('');
    
    projectList.innerHTML = projectsHTML;
    
    // イベントリスナーを追加
    projectList.querySelectorAll('.project-item').forEach(item => {
        item.addEventListener('click', function(e) {
            if (!e.target.closest('button')) {
                const projectId = this.dataset.projectId;
                selectProject(projectId);
            }
        });
    });
    
    projectList.querySelectorAll('.edit-project-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const projectId = this.dataset.projectId;
            showEditProjectModal(projectId);
        });
    });
    
    projectList.querySelectorAll('.delete-project-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const projectId = this.dataset.projectId;
            showDeleteProjectConfirm(projectId);
        });
    });
}

/**
 * プロジェクト選択
 */
async function selectProject(projectId) {
    try {
        Loading.show('プロジェクトを読み込み中...');
        
        // プロジェクト情報を取得
        const projectResponse = await API.get('api/projects.php', { id: projectId });
        
        if (!projectResponse.success) {
            throw new Error(projectResponse.error?.message || 'プロジェクトの読み込みに失敗しました');
        }
        
        // 現在のプロジェクトを設定
        AppState.currentProject = projectResponse.data;
        
        // プロジェクト一覧でアクティブ状態を更新
        updateProjectListSelection(projectId);
        
        // エクスポートボタンを有効化
        const exportBtn = document.getElementById('export-project-btn');
        if (exportBtn) {
            exportBtn.disabled = false;
        }
        
        // シーン一覧画面に遷移
        await loadSceneListView(projectId);
        
        // ページタイトルを更新
        updatePageTitle(AppState.currentProject.name);
        
        // モバイルでサイドバーを閉じる
        if (window.innerWidth < 768) {
            closeSidebar();
        }
        
        Notification.success(`プロジェクト「${AppState.currentProject.name}」を選択しました`);
        
    } catch (error) {
        Notification.error('プロジェクトの選択に失敗しました');
    } finally {
        Loading.hide();
    }
}

/**
 * プロジェクト一覧の選択状態を更新
 */
function updateProjectListSelection(selectedProjectId) {
    const projectItems = document.querySelectorAll('.project-item');
    
    projectItems.forEach(item => {
        const projectId = item.dataset.projectId;
        if (projectId === selectedProjectId) {
            item.classList.add('selected');
        } else {
            item.classList.remove('selected');
        }
    });
}

/**
 * ページタイトルを更新
 */
function updatePageTitle(title) {
    const pageTitleElement = document.getElementById('page-title');
    if (pageTitleElement) {
        pageTitleElement.textContent = title;
    }
    
    // ブラウザのタイトルも更新
    document.title = `${title} - Music Video Creator`;
}

/**
 * プロジェクト作成モーダルを表示
 */
function showCreateProjectModal() {
    const modalContent = `
        <form id="create-project-form">
            <div class="space-y-4">
                <div>
                    <label for="project-name" class="block text-sm font-medium text-gray-700 mb-2">楽曲名</label>
                    <input type="text" id="project-name" name="name" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                           placeholder="楽曲名を入力してください">
                </div>
                <div>
                    <label for="project-notes" class="block text-sm font-medium text-gray-700 mb-2">備考</label>
                    <textarea id="project-notes" name="notes" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="備考を入力してください（任意）"></textarea>
                </div>
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        キャンセル
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        作成
                    </button>
                </div>
            </div>
        </form>
    `;
    
    Modal.create('新規プロジェクト作成', modalContent);
    
    // フォーム送信イベント
    document.getElementById('create-project-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const projectData = {
            name: formData.get('name'),
            notes: formData.get('notes') || ''
        };
        
        try {
            Loading.show('プロジェクトを作成中...');
            
            const response = await API.post('api/projects.php', projectData);
            
            if (response.success) {
                Modal.close();
                Notification.success('プロジェクトを作成しました');
                
                // プロジェクト一覧を再読み込み
                await loadProjectList();
                
                // 作成したプロジェクトを選択
                if (response.data && response.data.id) {
                    await selectProject(response.data.id);
                }
            } else {
                throw new Error(response.error?.message || 'プロジェクトの作成に失敗しました');
            }
            
        } catch (error) {
            Notification.error(error.message || 'プロジェクトの作成に失敗しました');
        } finally {
            Loading.hide();
        }
    });
    
    // 楽曲名フィールドにフォーカス
    setTimeout(() => {
        document.getElementById('project-name').focus();
    }, 100);
}

/**
 * シーン一覧画面を読み込み
 */
async function loadSceneListView(projectId) {
    try {
        // シーン一覧を取得
        const scenesResponse = await API.get('api/scenes.php', { project_id: projectId });
        
        if (!scenesResponse.success) {
            throw new Error(scenesResponse.error?.message || 'シーン一覧の読み込みに失敗しました');
        }
        
        // シーン一覧画面を描画
        renderSceneListView(scenesResponse.data || []);
        
    } catch (error) {
        Notification.error('シーン一覧の読み込みに失敗しました');
        
        // エラー時は空のシーン一覧を表示
        renderSceneListView([]);
    }
}

/**
 * メディアライブラリを表示
 */
async function showMediaLibrary() {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    const modalContent = `
        <div class="media-library-container">
            <!-- フィルタータブ -->
            <div class="flex space-x-2 mb-4">
                <button id="filter-all" class="filter-btn active px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    全て
                </button>
                <button id="filter-image" class="filter-btn px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    画像のみ
                </button>
                <button id="filter-video" class="filter-btn px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    動画のみ
                </button>
            </div>
            
            <!-- アップロードエリア -->
            <div id="drop-zone" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center mb-6 transition-all">
                <div class="space-y-3">
                    <svg class="w-12 h-12 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                    </svg>
                    <div>
                        <p class="text-lg font-medium text-gray-700">ファイルをドロップしてアップロード</p>
                        <p class="text-sm text-gray-500 mt-1">または</p>
                    </div>
                    <button id="file-select-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        ファイル選択
                    </button>
                    <input type="file" id="file-input" multiple accept="image/*,video/*" class="hidden">
                </div>
            </div>
            
            <!-- アップロード進捗 -->
            <div id="upload-progress" class="hidden mb-4">
                <div class="bg-gray-200 rounded-full h-2">
                    <div id="upload-progress-bar" class="h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
                <p id="upload-status" class="text-sm text-gray-600 mt-2">アップロード中...</p>
            </div>
            
            <!-- ファイル一覧 -->
            <div class="flex-1 overflow-y-auto">
                <div id="media-grid" class="grid grid-cols-4 gap-4 min-h-64">
                    <!-- ファイルアイテムがここに表示される -->
                    <div class="flex items-center justify-center col-span-4 py-12">
                        <div class="text-center">
                            <svg class="w-12 h-12 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            <p class="text-gray-500">読み込み中...</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- フッター -->
            <div class="flex justify-between items-center pt-4 border-t border-gray-200 mt-4">
                <div id="selection-info" class="text-sm text-gray-600">
                    ファイルが選択されていません
                </div>
                <div class="space-x-2">
                    <button id="delete-selected-btn" class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        削除
                    </button>
                    <button onclick="Modal.close()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        閉じる
                    </button>
                </div>
            </div>
        </div>
    `;
    
    Modal.create('メディアライブラリ', modalContent, 'max-w-4xl');
    
    // メディアライブラリの初期化
    await initializeMediaLibrary();
}

/**
 * メディアライブラリの初期化
 */
async function initializeMediaLibrary() {
    // 現在のフィルター状態
    let currentFilter = 'all';
    let selectedFiles = new Set();
    
    // ファイル一覧を読み込み
    await loadMediaFiles(currentFilter);
    
    // フィルターボタンのイベントリスナー
    document.getElementById('filter-all').addEventListener('click', () => setFilter('all'));
    document.getElementById('filter-image').addEventListener('click', () => setFilter('image'));
    document.getElementById('filter-video').addEventListener('click', () => setFilter('video'));
    
    // ファイル選択ボタン
    document.getElementById('file-select-btn').addEventListener('click', () => {
        document.getElementById('file-input').click();
    });
    
    // ファイル入力の変更
    document.getElementById('file-input').addEventListener('change', handleFileSelect);
    
    // ドラッグ&ドロップ
    const dropZone = document.getElementById('drop-zone');
    
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('drag-over');
    });
    
    dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        if (!dropZone.contains(e.relatedTarget)) {
            dropZone.classList.remove('drag-over');
        }
    });
    
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('drag-over');
        handleFileDrop(e);
    });
    
    // 削除ボタン
    document.getElementById('delete-selected-btn').addEventListener('click', handleDeleteSelected);
    
    // フィルター設定関数
    async function setFilter(filter) {
        currentFilter = filter;
        
        // フィルターボタンの状態更新
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`filter-${filter}`).classList.add('active');
        
        // ファイル一覧を再読み込み
        await loadMediaFiles(filter);
    }
    
    // ファイル一覧読み込み
    async function loadMediaFiles(filter = 'all') {
        try {
            const response = await API.get('api/media.php', {
                project_id: AppState.currentProject.id,
                filter: filter
            });
            
            if (response.success) {
                renderMediaFiles(response.data || []);
            } else {
                throw new Error(response.error?.message || 'ファイル一覧の読み込みに失敗しました');
            }
        } catch (error) {
            Notification.error('ファイル一覧の読み込みに失敗しました');
            renderMediaFiles([]);
        }
    }
    
    // ファイル一覧の描画
    function renderMediaFiles(files) {
        const mediaGrid = document.getElementById('media-grid');
        
        if (!files || files.length === 0) {
            mediaGrid.innerHTML = `
                <div class="flex items-center justify-center col-span-4 py-12 empty-state">
                    <div class="text-center">
                        <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <h4 class="text-lg font-medium text-gray-700 mb-2">ファイルがありません</h4>
                        <p class="text-gray-500">ファイルをアップロードしてください</p>
                    </div>
                </div>
            `;
            return;
        }
        
        const filesHTML = files.map(file => {
            const isImage = file.type.startsWith('image/');
            const isVideo = file.type.startsWith('video/');
            const fileUrl = `data/projects/${AppState.currentProject.id}/media/${isImage ? 'images' : 'videos'}/${file.id}`;
            
            return `
                <div class="media-item border-2 border-gray-200 rounded-lg overflow-hidden cursor-pointer transition-all hover:shadow-lg" 
                     data-file-id="${file.id}" data-file-type="${isImage ? 'image' : 'video'}">
                    <div class="aspect-square bg-gray-100 relative">
                        ${isImage ? `
                            <img src="${fileUrl}" alt="${file.name}" class="w-full h-full object-cover">
                        ` : `
                            <div class="w-full h-full bg-gray-800 flex items-center justify-center relative">
                                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6-8h8a2 2 0 012 2v8a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2z"></path>
                                </svg>
                                <div class="absolute top-1 left-1 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded">
                                    VIDEO
                                </div>
                            </div>
                        `}
                    </div>
                    
                    <!-- ファイル情報 -->
                    <div class="p-3 bg-white">
                        <div class="flex items-center justify-between mb-2">
                            <h4 class="text-sm font-medium text-gray-900 truncate flex-1 mr-2">${file.name}</h4>
                            <button class="delete-file-btn p-1 text-gray-400 hover:text-red-600 transition-colors" 
                                    data-file-id="${file.id}" title="削除">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                        <div class="flex justify-between text-xs text-gray-500">
                            <span>${Utils.formatFileSize(file.size)}</span>
                            <span>${Utils.formatDate(file.updated_at)}</span>
                        </div>
                    </div>
                    
                    <!-- 選択オーバーレイ -->
                    <div class="selected-overlay absolute inset-0 bg-blue-600 bg-opacity-20 flex items-center justify-center opacity-0 transition-opacity">
                        <div class="bg-blue-600 text-white rounded-full p-2">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        mediaGrid.innerHTML = filesHTML;
        
        // ファイルアイテムのイベントリスナー
        mediaGrid.querySelectorAll('.media-item').forEach(item => {
            item.addEventListener('click', function() {
                const fileId = this.dataset.fileId;
                toggleFileSelection(fileId);
            });
        });
        
        // 削除ボタンのイベントリスナー
        mediaGrid.querySelectorAll('.delete-file-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const fileId = this.dataset.fileId;
                deleteFile(fileId);
            });
        });
        
        // 選択状態を更新
        updateSelectionDisplay();
    }
    
    // ファイル選択の切り替え
    function toggleFileSelection(fileId) {
        const item = document.querySelector(`[data-file-id="${fileId}"]`);
        if (!item) return;
        
        if (selectedFiles.has(fileId)) {
            selectedFiles.delete(fileId);
            item.classList.remove('selected');
            item.querySelector('.selected-overlay').style.opacity = '0';
        } else {
            selectedFiles.add(fileId);
            item.classList.add('selected');
            item.querySelector('.selected-overlay').style.opacity = '1';
        }
        
        updateSelectionDisplay();
    }
    
    // 選択状態の表示を更新
    function updateSelectionDisplay() {
        const selectionInfo = document.getElementById('selection-info');
        const deleteBtn = document.getElementById('delete-selected-btn');
        
        if (selectedFiles.size === 0) {
            selectionInfo.textContent = 'ファイルが選択されていません';
            deleteBtn.disabled = true;
        } else {
            selectionInfo.textContent = `${selectedFiles.size}個のファイルが選択されています`;
            deleteBtn.disabled = false;
        }
    }
    
    // ファイル選択処理
    function handleFileSelect(e) {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルドロップ処理
    function handleFileDrop(e) {
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルアップロード処理
    async function uploadFiles(files) {
        if (!files || files.length === 0) return;
        
        // ファイルタイプの検証
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'video/mp4', 'video/mov', 'video/avi', 'video/webm'];
        const invalidFiles = files.filter(file => !allowedTypes.includes(file.type));
        
        if (invalidFiles.length > 0) {
            Notification.error(`サポートされていないファイル形式が含まれています: ${invalidFiles.map(f => f.name).join(', ')}`);
            return;
        }
        
        try {
            showUploadProgress();
            updateUploadProgress(0, `${files.length}個のファイルをアップロード中...`);
            
            const formData = new FormData();
            formData.append('project_id', AppState.currentProject.id);
            
            files.forEach((file, index) => {
                formData.append(`files[${index}]`, file);
            });
            
            // アップロード進捗のシミュレーション
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 20;
                if (progress > 90) progress = 90;
                updateUploadProgress(progress, `${files.length}個のファイルをアップロード中...`);
            }, 200);
            
            const response = await fetch('api/media.php', {
                method: 'POST',
                body: formData
            });
            
            clearInterval(progressInterval);
            
            const result = await response.json();
            
            if (result.success) {
                updateUploadProgress(100, 'アップロード完了');
                
                if (result.errors && result.errors.length > 0) {
                    Notification.warning(`${result.success_count}個のファイルをアップロードしました。${result.errors.length}個のファイルでエラーが発生しました。`);
                } else {
                    Notification.success(`${result.success_count}個のファイルをアップロードしました`);
                }
                
                // ファイル一覧を更新
                setTimeout(async () => {
                    await loadMediaFiles(currentFilter);
                    hideUploadProgress();
                }, 1000);
                
            } else {
                throw new Error(result.error?.message || 'アップロードに失敗しました');
            }
            
        } catch (error) {
            updateUploadProgress(0, 'アップロードに失敗しました');
            Notification.error('ファイルのアップロードに失敗しました: ' + error.message);
            
            setTimeout(() => {
                hideUploadProgress();
            }, 2000);
        }
    }
    
    // アップロード進捗の表示
    function showUploadProgress() {
        const progressContainer = document.getElementById('upload-progress');
        if (progressContainer) {
            progressContainer.classList.remove('hidden');
        }
    }
    
    // アップロード進捗の更新
    function updateUploadProgress(percentage, message) {
        const progressBar = document.getElementById('upload-progress-bar');
        const statusText = document.getElementById('upload-status');
        
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
            
            // 進捗に応じて色を変更
            if (percentage === 100) {
                progressBar.className = 'h-2 rounded-full transition-all duration-300 bg-green-500';
            } else {
                progressBar.className = 'h-2 rounded-full transition-all duration-300 bg-blue-500';
            }
        }
        
        if (statusText) {
            statusText.textContent = message;
        }
    }
    
    // アップロード進捗の非表示
    function hideUploadProgress() {
        const progressContainer = document.getElementById('upload-progress');
        if (progressContainer) {
            progressContainer.classList.add('hidden');
        }
        
        // 進捗をリセット
        updateUploadProgress(0, 'アップロード中...');
    }
    
    // ファイル削除処理
    async function deleteFile(fileId) {
        if (!confirm('このファイルを削除しますか？\n関連するシーンからも自動的に削除されます。')) {
            return;
        }
        
        try {
            Loading.show('ファイルを削除中...');
            
            const response = await API.delete('api/media.php', {
                project_id: AppState.currentProject.id,
                file_id: fileId
            });
            
            if (response.success) {
                Notification.success('ファイルを削除しました');
                
                // 選択状態から削除
                selectedFiles.delete(fileId);
                
                // ファイル一覧を更新
                await loadMediaFiles(currentFilter);
                
            } else {
                throw new Error(response.error?.message || 'ファイルの削除に失敗しました');
            }
            
        } catch (error) {
            Notification.error('ファイルの削除に失敗しました: ' + error.message);
        } finally {
            Loading.hide();
        }
    }
    
    // 選択されたファイルの削除
    async function handleDeleteSelected() {
        if (selectedFiles.size === 0) return;
        
        const fileCount = selectedFiles.size;
        if (!confirm(`選択された${fileCount}個のファイルを削除しますか？\n関連するシーンからも自動的に削除されます。`)) {
            return;
        }
        
        try {
            Loading.show(`${fileCount}個のファイルを削除中...`);
            
            const deletePromises = Array.from(selectedFiles).map(fileId => 
                API.delete('api/media.php', {
                    project_id: AppState.currentProject.id,
                    file_id: fileId
                })
            );
            
            const results = await Promise.allSettled(deletePromises);
            
            let successCount = 0;
            let errorCount = 0;
            
            results.forEach(result => {
                if (result.status === 'fulfilled' && result.value.success) {
                    successCount++;
                } else {
                    errorCount++;
                }
            });
            
            // 結果に応じてメッセージを表示
            if (errorCount === 0) {
                Notification.success(`${successCount}個のファイルを削除しました`);
            } else if (successCount === 0) {
                Notification.error(`${errorCount}個のファイルの削除に失敗しました`);
            } else {
                Notification.warning(`${successCount}個のファイルを削除しました。${errorCount}個のファイルで削除に失敗しました。`);
            }
            
            // 選択状態をクリア
            selectedFiles.clear();
            
            // ファイル一覧を更新
            await loadMediaFiles(currentFilter);
            
        } catch (error) {
            Notification.error('ファイルの削除中にエラーが発生しました');
        } finally {
            Loading.hide();
        }
    }
    
    // ファイル選択の切り替え
    function toggleFileSelection(fileId) {
        if (selectedFiles.has(fileId)) {
            selectedFiles.delete(fileId);
        } else {
            selectedFiles.add(fileId);
        }
        
        // 選択状態の表示更新
        const fileItem = document.querySelector(`[data-file-id="${fileId}"]`);
        if (fileItem) {
            if (selectedFiles.has(fileId)) {
                fileItem.classList.add('selected');
            } else {
                fileItem.classList.remove('selected');
            }
        }
        
        updateSelectionInfo();
    }
    
    // 選択情報の更新
    function updateSelectionInfo() {
        const selectionInfo = document.getElementById('selection-info');
        const deleteBtn = document.getElementById('delete-selected-btn');
        
        if (selectedFiles.size === 0) {
            selectionInfo.textContent = 'ファイルが選択されていません';
            deleteBtn.disabled = true;
        } else {
            selectionInfo.textContent = `${selectedFiles.size}個のファイルが選択されています`;
            deleteBtn.disabled = false;
        }
    }
    
    // ファイル選択処理
    function handleFileSelect(e) {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルドロップ処理
    function handleFileDrop(e) {
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルアップロード処理
    async function uploadFiles(files) {
        if (!files || files.length === 0) return;
        
        // 進捗表示を開始
        showUploadProgress();
        
        try {
            const formData = new FormData();
            formData.append('project_id', AppState.currentProject.id);
            
            // 複数ファイルを追加
            files.forEach((file, index) => {
                formData.append('files[]', file);
            });
            
            // アップロード進捗の更新
            updateUploadProgress(0, `${files.length}個のファイルをアップロード中...`);
            
            const response = await fetch('api/media.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                // 成功時の処理
                updateUploadProgress(100, `${result.success_count}個のファイルをアップロードしました`);
                
                // 成功メッセージ
                if (result.error_count > 0) {
                    Notification.warning(`${result.success_count}個のファイルをアップロードしました。${result.error_count}個のファイルでエラーが発生しました。`);
                } else {
                    Notification.success(`${result.success_count}個のファイルをアップロードしました`);
                }
                
                // ファイル一覧を更新
                setTimeout(async () => {
                    await loadMediaFiles(currentFilter);
                    hideUploadProgress();
                }, 1000);
                
            } else {
                throw new Error(result.error?.message || 'アップロードに失敗しました');
            }
            
        } catch (error) {
            updateUploadProgress(0, 'アップロードに失敗しました');
            Notification.error('ファイルのアップロードに失敗しました: ' + error.message);
            
            setTimeout(() => {
                hideUploadProgress();
            }, 2000);
        }
    }
    
    // アップロード進捗の表示
    function showUploadProgress() {
        const progressContainer = document.getElementById('upload-progress');
        if (progressContainer) {
            progressContainer.classList.remove('hidden');
        }
    }
    
    // アップロード進捗の更新
    function updateUploadProgress(percentage, message) {
        const progressBar = document.getElementById('upload-progress-bar');
        const statusText = document.getElementById('upload-status');
        
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
            
            // 進捗に応じて色を変更
            if (percentage === 100) {
                progressBar.className = 'h-2 rounded-full transition-all duration-300 bg-green-500';
            } else {
                progressBar.className = 'h-2 rounded-full transition-all duration-300 bg-blue-500';
            }
        }
        
        if (statusText) {
            statusText.textContent = message;
        }
    }
    
    // アップロード進捗の非表示
    function hideUploadProgress() {
        const progressContainer = document.getElementById('upload-progress');
        if (progressContainer) {
            progressContainer.classList.add('hidden');
        }
        
        // 進捗をリセット
        updateUploadProgress(0, 'アップロード中...');
    }
    
    // ファイル削除処理
    async function deleteFile(fileId) {
        if (!confirm('このファイルを削除しますか？\n関連するシーンからも自動的に削除されます。')) {
            return;
        }
        
        try {
            Loading.show('ファイルを削除中...');
            
            const response = await API.delete('api/media.php', {
                project_id: AppState.currentProject.id,
                file_id: fileId
            });
            
            if (response.success) {
                Notification.success('ファイルを削除しました');
                
                // 選択状態から削除
                selectedFiles.delete(fileId);
                
                // ファイル一覧を更新
                await loadMediaFiles(currentFilter);
                
            } else {
                throw new Error(response.error?.message || 'ファイルの削除に失敗しました');
            }
            
        } catch (error) {
            Notification.error('ファイルの削除に失敗しました: ' + error.message);
        } finally {
            Loading.hide();
        }
    }
    
    // 選択されたファイルの削除
    async function handleDeleteSelected() {
        if (selectedFiles.size === 0) return;
        
        const fileCount = selectedFiles.size;
        if (!confirm(`選択された${fileCount}個のファイルを削除しますか？\n関連するシーンからも自動的に削除されます。`)) {
            return;
        }
        
        try {
            Loading.show(`${fileCount}個のファイルを削除中...`);
            
            const deletePromises = Array.from(selectedFiles).map(fileId => 
                API.delete('api/media.php', {
                    project_id: AppState.currentProject.id,
                    file_id: fileId
                })
            );
            
            const results = await Promise.allSettled(deletePromises);
            
            let successCount = 0;
            let errorCount = 0;
            
            results.forEach(result => {
                if (result.status === 'fulfilled' && result.value.success) {
                    successCount++;
                } else {
                    errorCount++;
                }
            });
            
            // 結果に応じてメッセージを表示
            if (errorCount === 0) {
                Notification.success(`${successCount}個のファイルを削除しました`);
            } else if (successCount === 0) {
                Notification.error(`${errorCount}個のファイルの削除に失敗しました`);
            } else {
                Notification.warning(`${successCount}個のファイルを削除しました。${errorCount}個のファイルで削除に失敗しました。`);
            }
            
            // 選択状態をクリア
            selectedFiles.clear();
            
            // ファイル一覧を更新
            await loadMediaFiles(currentFilter);
            
        } catch (error) {
            Notification.error('ファイルの削除中にエラーが発生しました');
        } finally {
            Loading.hide();
        }
    }
}

/**
 * シーン一覧画面の描画
 */
function renderSceneListView(scenes) {
    const mainContent = document.getElementById('main-content');
    
    const sceneListHTML = `
        <div class="scene-list-container">
            <!-- ヘッダー -->
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">${Utils.escapeHtml(AppState.currentProject.name)}</h1>
                    <p class="text-gray-600 mt-1">シーン一覧</p>
                </div>
                <div class="flex items-center space-x-3">
                    <button id="upload-scenes-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        シーンファイル
                    </button>
                    <button id="media-library-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        メディアライブラリ
                    </button>
                    <button id="add-scene-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        新規シーン
                    </button>
                </div>
            </div>
            
            <!-- シーンテーブル -->
            <div class="table-container bg-white rounded-lg shadow">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="table-header">
                            <tr>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
                                    </svg>
                                </th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-20">サムネイル</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24">開始時間</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">歌詞</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">シーン説明</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">英語プロンプト</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">操作</th>
                            </tr>
                        </thead>
                        <tbody id="scene-table-body">
                            ${renderSceneRows(scenes)}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
    
    mainContent.innerHTML = sceneListHTML;
    
    // イベントリスナーを設定
    setupSceneListEventListeners();
}

/**
 * シーン行の描画
 */
function renderSceneRows(scenes) {
    if (!scenes || scenes.length === 0) {
        return `
            <tr>
                <td colspan="7" class="px-6 py-12 text-center text-gray-500">
                    <div class="flex flex-col items-center">
                        <svg class="w-12 h-12 text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <p class="text-lg font-medium mb-2">シーンがありません</p>
                        <p class="text-sm">「新規シーン」ボタンからシーンを追加してください</p>
                    </div>
                </td>
            </tr>
        `;
    }
    
    return scenes.map((scene, index) => {
        const thumbnailUrl = scene.image_file_id ? 
            `data/projects/${AppState.currentProject.id}/media/images/${scene.image_file_id}` : null;
        
        return `
            <tr class="scene-row table-row border-b border-gray-200" data-scene-id="${scene.id}" data-order="${scene.order}">
                <td class="px-6 py-4">
                    <div class="drag-handle text-gray-400 hover:text-gray-600 cursor-move" title="ドラッグして並び替え">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
                        </svg>
                    </div>
                </td>
                <td class="px-6 py-4">
                    <div class="w-12 h-12 bg-gray-100 rounded-lg overflow-hidden cursor-pointer hover:shadow-md transition-shadow" 
                         onclick="openSceneDetail('${scene.id}')" title="クリックして詳細編集">
                        ${thumbnailUrl ? 
                            `<img src="${thumbnailUrl}" alt="サムネイル" class="w-full h-full object-cover">` :
                            `<div class="w-full h-full flex items-center justify-center text-gray-400">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>`
                        }
                    </div>
                </td>
                <td class="px-6 py-4">
                    <input type="text" 
                           class="scene-field inline-edit w-20 text-sm" 
                           data-scene-id="${scene.id}" 
                           data-field="start_time"
                           value="${Utils.escapeHtml(scene.start_time || '')}"
                           placeholder="0:00">
                </td>
                <td class="px-6 py-4">
                    <textarea class="scene-field inline-edit w-full text-sm resize-none" 
                              data-scene-id="${scene.id}" 
                              data-field="lyrics"
                              rows="2"
                              placeholder="歌詞を入力...">${Utils.escapeHtml(scene.lyrics || '')}</textarea>
                </td>
                <td class="px-6 py-4">
                    <textarea class="scene-field inline-edit w-full text-sm resize-none" 
                              data-scene-id="${scene.id}" 
                              data-field="description"
                              rows="2"
                              placeholder="シーン説明を入力...">${Utils.escapeHtml(scene.description || '')}</textarea>
                </td>
                <td class="px-6 py-4">
                    <textarea class="scene-field inline-edit w-full text-sm resize-none" 
                              data-scene-id="${scene.id}" 
                              data-field="image_prompt"
                              rows="2"
                              placeholder="英語プロンプトを入力...">${Utils.escapeHtml(scene.image_prompt || '')}</textarea>
                </td>
                <td class="px-6 py-4">
                    <button class="delete-scene-btn p-1 text-gray-400 hover:text-red-600 transition-colors" 
                            data-scene-id="${scene.id}" title="削除">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                </td>
            </tr>
        `;
    }).join('');
}

/**
 * シーン一覧のイベントリスナー設定
 */
function setupSceneListEventListeners() {
    // メディアライブラリボタン
    const mediaLibraryBtn = document.getElementById('media-library-btn');
    if (mediaLibraryBtn) {
        mediaLibraryBtn.addEventListener('click', showMediaLibrary);
    }
    
    // 新規シーンボタン
    const addSceneBtn = document.getElementById('add-scene-btn');
    if (addSceneBtn) {
        addSceneBtn.addEventListener('click', addNewScene);
    }
    
    // シーンファイルアップロードボタン
    const uploadScenesBtn = document.getElementById('upload-scenes-btn');
    if (uploadScenesBtn) {
        uploadScenesBtn.addEventListener('click', showSceneFileUploadModal);
    }
    
    // インライン編集のイベントリスナー
    setupInlineEditListeners();
    
    // シーン削除ボタン
    document.querySelectorAll('.delete-scene-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const sceneId = this.dataset.sceneId;
            deleteScene(sceneId);
        });
    });
    
    // ドラッグ&ドロップの設定
    setupSceneDragAndDrop();
}

/**
 * インライン編集のイベントリスナー設定
 */
function setupInlineEditListeners() {
    document.querySelectorAll('.scene-field').forEach(field => {
        // フォーカス時
        field.addEventListener('focus', function() {
            this.classList.add('editing');
            this.closest('.scene-row').classList.add('editing-row');
        });
        
        // フォーカス離脱時
        field.addEventListener('blur', function() {
            this.classList.remove('editing');
            this.closest('.scene-row').classList.remove('editing-row');
            
            // 自動保存
            saveSceneField(this);
        });
        
        // Enterキー処理（textareaの場合はShift+Enter以外）
        field.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && this.tagName.toLowerCase() !== 'textarea') {
                e.preventDefault();
                this.blur();
            } else if (e.key === 'Enter' && this.tagName.toLowerCase() === 'textarea' && !e.shiftKey) {
                e.preventDefault();
                this.blur();
            }
        });
    });
}

/**
 * シーンフィールドの保存
 */
async function saveSceneField(fieldElement) {
    const sceneId = fieldElement.dataset.sceneId;
    const fieldName = fieldElement.dataset.field;
    const value = fieldElement.value;
    
    // バリデーション
    if (fieldName === 'start_time' && value) {
        const timePattern = /^\d{1,2}:\d{2}$/;
        if (!timePattern.test(value)) {
            fieldElement.classList.add('invalid');
            Notification.error('時間は「分:秒」の形式で入力してください（例: 1:30）');
            setTimeout(() => {
                fieldElement.classList.remove('invalid');
            }, 3000);
            return;
        }
    }
    
    try {
        // 保存状態の表示
        fieldElement.classList.add('saving');
        
        const updateData = {};
        updateData[fieldName] = value;
        
        const response = await API.put(`api/scenes.php?id=${sceneId}`, updateData);
        
        if (response.success) {
            // 保存成功
            fieldElement.classList.remove('saving');
            fieldElement.classList.add('saved');
            
            setTimeout(() => {
                fieldElement.classList.remove('saved');
            }, 2000);
            
        } else {
            throw new Error(response.error?.message || '保存に失敗しました');
        }
        
    } catch (error) {
        // 保存エラー
        fieldElement.classList.remove('saving');
        fieldElement.classList.add('save-error');
        
        Notification.error('保存に失敗しました: ' + error.message);
        
        setTimeout(() => {
            fieldElement.classList.remove('save-error');
        }, 3000);
    }
}

/**
 * 新規シーン追加
 */
async function addNewScene() {
    try {
        Loading.show('シーンを追加中...');
        
        const newSceneData = {
            project_id: AppState.currentProject.id,
            start_time: '',
            lyrics: '',
            description: '',
            image_prompt: '',
            video_prompt: ''
        };
        
        const response = await API.post('api/scenes.php', newSceneData);
        
        if (response.success) {
            Notification.success('新しいシーンを追加しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
            
        } else {
            throw new Error(response.error?.message || 'シーンの追加に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの追加に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン削除
 */
async function deleteScene(sceneId) {
    if (!confirm('このシーンを削除しますか？')) {
        return;
    }
    
    try {
        Loading.show('シーンを削除中...');
        
        const response = await API.delete('api/scenes.php', { id: sceneId });
        
        if (response.success) {
            Notification.success('シーンを削除しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
            
        } else {
            throw new Error(response.error?.message || 'シーンの削除に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの削除に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーンの詳細編集画面を開く
 */
function openSceneDetail(sceneId) {
    // シーン詳細編集の実装は別のタスクで行う
    Notification.info('シーン詳細編集機能は実装予定です');
}

/**
 * シーンファイルアップロードモーダルを表示
 */
function showSceneFileUploadModal() {
    const modalContent = `
        <form id="scene-file-upload-form">
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">シーンファイル</label>
                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                        <input type="file" id="scene-file-input" accept=".txt,.csv" class="hidden">
                        <div class="space-y-2">
                            <svg class="w-8 h-8 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                            </svg>
                            <p class="text-sm text-gray-600">テキストファイル（.txt）またはCSVファイル（.csv）を選択</p>
                            <button type="button" onclick="document.getElementById('scene-file-input').click()" 
                                    class="inline-flex items-center px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors">
                                ファイル選択
                            </button>
                        </div>
                        <div id="selected-file-info" class="hidden mt-3 p-3 bg-gray-50 rounded-md">
                            <p class="text-sm text-gray-700"></p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-blue-50 p-4 rounded-md">
                    <h4 class="text-sm font-medium text-blue-900 mb-2">ファイル形式について</h4>
                    <ul class="text-xs text-blue-800 space-y-1">
                        <li>• <strong>テキストファイル（.txt）:</strong> 歌詞を改行で区切って記述</li>
                        <li>• <strong>CSVファイル（.csv）:</strong> 開始時間,歌詞,説明,プロンプトの形式</li>
                    </ul>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        キャンセル
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 transition-colors">
                        アップロード
                    </button>
                </div>
            </div>
        </form>
    `;
    
    Modal.create('シーンファイルアップロード', modalContent);
    
    // ファイル選択の処理
    document.getElementById('scene-file-input').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const fileInfo = document.getElementById('selected-file-info');
        
        if (file) {
            fileInfo.classList.remove('hidden');
            fileInfo.querySelector('p').textContent = `選択されたファイル: ${file.name} (${Utils.formatFileSize(file.size)})`;
        } else {
            fileInfo.classList.add('hidden');
        }
    });
    
    // フォーム送信の処理
    document.getElementById('scene-file-upload-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const fileInput = document.getElementById('scene-file-input');
        const file = fileInput.files[0];
        
        if (!file) {
            Notification.error('ファイルを選択してください');
            return;
        }
        
        try {
            Loading.show('シーンファイルをアップロード中...');
            
            const formData = new FormData();
            formData.append('project_id', AppState.currentProject.id);
            formData.append('scene_file', file);
            
            const response = await fetch('api/scenes.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                Modal.close();
                Notification.success('シーンファイルをアップロードしました');
                
                // シーン一覧を再読み込み
                await loadSceneListView(AppState.currentProject.id);
                
            } else {
                throw new Error(result.error?.message || 'アップロードに失敗しました');
            }
            
        } catch (error) {
            Notification.error('シーンファイルのアップロードに失敗しました: ' + error.message);
        } finally {
            Loading.hide();
        }
    });
}

/**
 * シーンのドラッグ&ドロップ設定
 */
function setupSceneDragAndDrop() {
    // ドラッグ&ドロップ機能は別のタスクで実装予定
    // 現在は基本的なイベントリスナーのみ設定
    document.querySelectorAll('.drag-handle').forEach(handle => {
        handle.addEventListener('mousedown', function(e) {
            // ドラッグ開始の準備
            const row = this.closest('.scene-row');
            row.classList.add('drag-mode');
        });
    });
}

/**
 * プロジェクト編集モーダルを表示
 */
async function showEditProjectModal(projectId) {
    try {
        // プロジェクト情報を取得
        const response = await API.get('api/projects.php', { id: projectId });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'プロジェクト情報の取得に失敗しました');
        }
        
        const project = response.data;
        
        const modalContent = `
            <form id="edit-project-form">
                <div class="space-y-4">
                    <div>
                        <label for="edit-project-name" class="block text-sm font-medium text-gray-700 mb-2">楽曲名</label>
                        <input type="text" id="edit-project-name" name="name" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               value="${Utils.escapeHtml(project.name)}">
                    </div>
                    <div>
                        <label for="edit-project-notes" class="block text-sm font-medium text-gray-700 mb-2">備考</label>
                        <textarea id="edit-project-notes" name="notes" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">${Utils.escapeHtml(project.notes || '')}</textarea>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="Modal.close()" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            キャンセル
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            更新
                        </button>
                    </div>
                </div>
            </form>
        `;
        
        Modal.create('プロジェクト編集', modalContent);
        
        // フォーム送信イベント
        document.getElementById('edit-project-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const projectData = {
                name: formData.get('name'),
                notes: formData.get('notes') || ''
            };
            
            try {
                Loading.show('プロジェクトを更新中...');
                
                const updateResponse = await API.put(`api/projects.php?id=${projectId}`, projectData);
                
                if (updateResponse.success) {
                    Modal.close();
                    Notification.success('プロジェクトを更新しました');
                    
                    // プロジェクト一覧を再読み込み
                    await loadProjectList();
                    
                    // 現在のプロジェクトが更新された場合、ページタイトルも更新
                    if (AppState.currentProject && AppState.currentProject.id === projectId) {
                        AppState.currentProject.name = projectData.name;
                        AppState.currentProject.notes = projectData.notes;
                        updatePageTitle(projectData.name);
                    }
                    
                } else {
                    throw new Error(updateResponse.error?.message || 'プロジェクトの更新に失敗しました');
                }
                
            } catch (error) {
                Notification.error(error.message || 'プロジェクトの更新に失敗しました');
            } finally {
                Loading.hide();
            }
        });
        
        // 楽曲名フィールドにフォーカス
        setTimeout(() => {
            document.getElementById('edit-project-name').focus();
        }, 100);
        
    } catch (error) {
        Notification.error('プロジェクト情報の取得に失敗しました');
    }
}

/**
 * プロジェクト削除確認モーダルを表示
 */
async function showDeleteProjectConfirm(projectId) {
    try {
        // プロジェクト情報を取得
        const response = await API.get('api/projects.php', { id: projectId });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'プロジェクト情報の取得に失敗しました');
        }
        
        const project = response.data;
        
        const modalContent = `
            <div class="space-y-4">
                <div class="flex items-center space-x-3">
                    <div class="flex-shrink-0">
                        <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">プロジェクトの削除</h3>
                        <p class="text-sm text-gray-600 mt-1">この操作は取り消すことができません。</p>
                    </div>
                </div>
                
                <div class="bg-red-50 p-4 rounded-md">
                    <p class="text-sm text-red-800">
                        <strong>「${Utils.escapeHtml(project.name)}」</strong>を削除しますか？<br>
                        プロジェクトに含まれる全てのシーンとメディアファイルも削除されます。
                    </p>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        キャンセル
                    </button>
                    <button type="button" id="confirm-delete-btn"
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        削除する
                    </button>
                </div>
            </div>
        `;
        
        Modal.create('プロジェクト削除の確認', modalContent);
        
        // 削除確認ボタンのイベント
        document.getElementById('confirm-delete-btn').addEventListener('click', async function() {
            try {
                Loading.show('プロジェクトを削除中...');
                
                const deleteResponse = await API.delete('api/projects.php', { id: projectId });
                
                if (deleteResponse.success) {
                    Modal.close();
                    Notification.success('プロジェクトを削除しました');
                    
                    // 削除されたプロジェクトが現在選択中の場合、状態をクリア
                    if (AppState.currentProject && AppState.currentProject.id === projectId) {
                        AppState.currentProject = null;
                        updatePageTitle('Music Video Creator');
                        
                        // メインコンテンツをクリア
                        const mainContent = document.getElementById('main-content');
                        if (mainContent) {
                            mainContent.innerHTML = `
                                <div class="flex items-center justify-center h-full">
                                    <div class="text-center">
                                        <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                        </svg>
                                        <h2 class="text-xl font-semibold text-gray-700 mb-2">プロジェクトを選択してください</h2>
                                        <p class="text-gray-500 mb-6">左のサイドバーからプロジェクトを選択するか、新規作成してください</p>
                                        <button id="get-started-btn" class="inline-flex items-center px-6 py-3 text-base font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                            </svg>
                                            新規プロジェクト作成
                                        </button>
                                    </div>
                                </div>
                            `;
                            
                            // 新規プロジェクトボタンのイベントリスナーを再設定
                            document.getElementById('get-started-btn').addEventListener('click', showCreateProjectModal);
                        }
                    }
                    
                    // プロジェクト一覧を再読み込み
                    await loadProjectList();
                    
                } else {
                    throw new Error(deleteResponse.error?.message || 'プロジェクトの削除に失敗しました');
                }
                
            } catch (error) {
                Notification.error(error.message || 'プロジェクトの削除に失敗しました');
            } finally {
                Loading.hide();
            }
        });
        
    } catch (error) {
        Notification.error('プロジェクト情報の取得に失敗しました');
    }
}

/**
 * シーン一覧画面の描画
 */
                                    <path d="M2 6a2 2 0 012-2h6l2 2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM5 8a1 1 0 011-1h1a1 1 0 010 2H6a1 1 0 01-1-1zm6 1a1 1 0 100 2h3a1 1 0 100-2h-3z"></path>
                                </svg>
                                <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                            </div>
                        `}
                        
                        <!-- ファイルタイプバッジ -->
                        <div class="absolute top-1 left-1 px-2 py-1 text-xs font-semibold text-white rounded ${isImage ? 'bg-green-500' : 'bg-blue-500'}">
                            ${isImage ? 'IMG' : 'VID'}
                        </div>
                        
                        <!-- 選択オーバーレイ -->
                        <div class="selected-overlay absolute inset-0 bg-blue-600 bg-opacity-30 flex items-center justify-center opacity-0 transition-opacity">
                            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    
                    <!-- ファイル情報 -->
                    <div class="p-2">
                        <p class="text-xs font-medium text-gray-900 truncate" title="${file.name}">${file.name}</p>
                        <p class="text-xs text-gray-500">${Utils.formatFileSize(file.size)}</p>
                    </div>
                </div>
            `;
        }).join('');
        
        mediaGrid.innerHTML = filesHTML;
        
        // ファイルアイテムのクリックイベント
        mediaGrid.querySelectorAll('.media-item').forEach(item => {
            item.addEventListener('click', () => toggleFileSelection(item));
        });
    }
    
    // ファイル選択の切り替え
    function toggleFileSelection(item) {
        const fileId = item.dataset.fileId;
        
        if (selectedFiles.has(fileId)) {
            selectedFiles.delete(fileId);
            item.classList.remove('selected');
        } else {
            selectedFiles.add(fileId);
            item.classList.add('selected');
        }
        
        updateSelectionInfo();
    }
    
    // 選択情報の更新
    function updateSelectionInfo() {
        const selectionInfo = document.getElementById('selection-info');
        const deleteBtn = document.getElementById('delete-selected-btn');
        
        if (selectedFiles.size === 0) {
            selectionInfo.textContent = 'ファイルが選択されていません';
            deleteBtn.disabled = true;
        } else {
            selectionInfo.textContent = `${selectedFiles.size}個のファイルが選択されています`;
            deleteBtn.disabled = false;
        }
    }
    
    // ファイル選択処理
    function handleFileSelect(e) {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルドロップ処理
    function handleFileDrop(e) {
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルアップロード
    async function uploadFiles(files) {
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const statusText = document.getElementById('upload-status');
        
        progressContainer.classList.remove('hidden');
        
        try {
            const formData = new FormData();
            formData.append('project_id', AppState.currentProject.id);
            
            // 複数ファイルの場合
            if (files.length > 1) {
                files.forEach((file, index) => {
                    formData.append(`files[${index}]`, file);
                });
            } else {
                formData.append('file', files[0]);
            }
            
            // アップロード進捗のシミュレーション
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 30;
                if (progress > 90) progress = 90;
                progressBar.style.width = progress + '%';
            }, 200);
            
            const response = await fetch('api/media.php', {
                method: 'POST',
                body: formData
            });
            
            clearInterval(progressInterval);
            progressBar.style.width = '100%';
            
            const result = await response.json();
            
            if (result.success) {
                statusText.textContent = 'アップロード完了';
                Notification.success(result.data.message);
                
                // ファイル一覧を再読み込み
                setTimeout(async () => {
                    await loadMediaFiles(currentFilter);
                    progressContainer.classList.add('hidden');
                    progressBar.style.width = '0%';
                    
                    // ファイル入力をリセット
                    document.getElementById('file-input').value = '';
                }, 1000);
            } else {
                throw new Error(result.error?.message || 'アップロードに失敗しました');
            }
            
        } catch (error) {
            progressContainer.classList.add('hidden');
            progressBar.style.width = '0%';
            Notification.error('ファイルのアップロードに失敗しました');
        }
    }
    
    // 選択ファイルの削除
    async function handleDeleteSelected() {
        if (selectedFiles.size === 0) return;
        
        const fileCount = selectedFiles.size;
        const confirmMessage = `選択した${fileCount}個のファイルを削除しますか？\n\n削除されたファイルはシーンからも自動的に関連付けが解除されます。`;
        
        if (!confirm(confirmMessage)) return;
        
        try {
            Loading.show('ファイルを削除中...');
            
            const deletePromises = Array.from(selectedFiles).map(async (fileId) => {
                const response = await API.delete('api/media.php', {
                    project_id: AppState.currentProject.id,
                    file_id: fileId
                });
                
                if (!response.success) {
                    throw new Error(`ファイル ${fileId} の削除に失敗しました`);
                }
                
                return fileId;
            });
            
            await Promise.all(deletePromises);
            
            Notification.success(`${fileCount}個のファイルを削除しました`);
            
            // 選択状態をクリア
            selectedFiles.clear();
            updateSelectionInfo();
            
            // ファイル一覧を再読み込み
            await loadMediaFiles(currentFilter);
            
        } catch (error) {
            Notification.error('ファイルの削除に失敗しました');
        } finally {
            Loading.hide();
        }
    }
}

/**
 * シーン一覧画面の描画
 */
function renderSceneListView(scenes) {
    const mainContent = document.getElementById('main-content');
    
    const sceneListHTML = `
        <div class="p-6">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <!-- ヘッダー -->
                <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900">シーン一覧</h3>
                            <p class="text-sm text-gray-500 mt-1">
                                プロジェクト: ${Utils.escapeHtml(AppState.currentProject?.name || '')} 
                                ${scenes.length > 0 ? `(${scenes.length}シーン)` : ''}
                            </p>
                        </div>
                        <div class="flex items-center space-x-3">
                            <button id="media-library-btn" class="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                                メディアライブラリ
                            </button>
                            <button id="add-scene-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                </svg>
                                シーン追加
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- シーン一覧 -->
                ${scenes.length > 0 ? `
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24">開始時間</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">歌詞</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">シーン説明</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">英語プロンプト</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-20">操作</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            ${renderSceneRows(scenes)}
                        </tbody>
                    </table>
                </div>
                <!-- シーン一覧下部のボタン -->
                <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                    <div class="flex justify-center">
                        <button id="add-scene-bottom-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-white border border-blue-300 rounded-md hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            新しいシーンを追加
                        </button>
                    </div>
                </div>
                ` : `
                <div class="text-center py-16">
                    <div class="max-w-sm mx-auto">
                        <svg class="w-20 h-20 mx-auto mb-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                        </svg>
                        <h4 class="text-xl font-semibold text-gray-900 mb-3">シーンがありません</h4>
                        <p class="text-gray-500 mb-8 leading-relaxed">
                            このプロジェクトにはまだシーンが登録されていません。<br>
                            新しいシーンを追加してください。
                        </p>
                        <button onclick="addNewScene()" class="inline-flex items-center px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            シーン追加
                        </button>
                    </div>
                </div>
                `}
            </div>
        </div>
    `;
    
    mainContent.innerHTML = sceneListHTML;
    
    // イベントリスナーを設定
    setupSceneListEventListeners();
}

/**
 * シーン行の描画
 */
function renderSceneRows(scenes) {
    if (!scenes || scenes.length === 0) {
        return '';
    }
    
    return scenes.map((scene, index) => `
        <tr class="scene-row hover:bg-gray-50 transition-colors cursor-pointer" 
            data-scene-id="${scene.id}" 
            draggable="true">
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                    <div class="drag-handle cursor-move mr-2 text-gray-400 hover:text-gray-600" title="ドラッグして並び替え">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                        </svg>
                    </div>
                    <input type="text" value="${scene.start_time || '0:00'}" 
                           class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded focus:border-blue-500 focus:outline-none"
                           data-field="start_time" data-scene-id="${scene.id}" onclick="event.stopPropagation()">
                </div>
            </td>
            <td class="px-6 py-4">
                <textarea class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded focus:border-blue-500 focus:outline-none resize-none"
                          data-field="lyrics" data-scene-id="${scene.id}" rows="2" onclick="event.stopPropagation()">${scene.lyrics || ''}</textarea>
            </td>
            <td class="px-6 py-4">
                <textarea class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded focus:border-blue-500 focus:outline-none resize-none"
                          data-field="description" data-scene-id="${scene.id}" rows="2" onclick="event.stopPropagation()">${scene.description || ''}</textarea>
            </td>
            <td class="px-6 py-4">
                <textarea class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded focus:border-blue-500 focus:outline-none resize-none"
                          data-field="image_prompt" data-scene-id="${scene.id}" rows="2" onclick="event.stopPropagation()">${scene.image_prompt || ''}</textarea>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <button class="delete-scene-btn p-1 text-gray-400 hover:text-red-600 transition-colors" data-scene-id="${scene.id}" title="削除" onclick="event.stopPropagation()">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                </button>
            </td>
        </tr>
    `).join('');
}

/**
 * シーン一覧のイベントリスナー設定
 */
function setupSceneListEventListeners() {
    // メディアライブラリボタン
    const mediaLibraryBtn = document.getElementById('media-library-btn');
    if (mediaLibraryBtn) {
        mediaLibraryBtn.addEventListener('click', showMediaLibrary);
    }
    
    // シーン追加ボタン（ヘッダー）
    const addSceneBtn = document.getElementById('add-scene-btn');
    if (addSceneBtn) {
        addSceneBtn.addEventListener('click', () => {
            addNewScene();
        });
    }
    
    // シーン追加ボタン（最下部）
    const addSceneBottomBtn = document.getElementById('add-scene-bottom-btn');
    if (addSceneBottomBtn) {
        addSceneBottomBtn.addEventListener('click', () => {
            addNewScene();
        });
    }
    
    // シーンフィールドの自動保存
    document.querySelectorAll('.scene-field').forEach(field => {
        field.addEventListener('blur', function() {
            saveSceneField(this);
        });
        
        // 入力欄のクリックイベントを停止（行クリックを防ぐ）
        field.addEventListener('click', function(e) {
            e.stopPropagation();
        });
        
        // フォーカス時も行クリックを防ぐ
        field.addEventListener('focus', function(e) {
            e.stopPropagation();
        });
    });
    
    // シーン行クリックで詳細編集画面に遷移
    document.querySelectorAll('.scene-row').forEach(row => {
        row.addEventListener('click', function() {
            const sceneId = this.dataset.sceneId;
            openSceneDetail(sceneId);
        });
    });
    
    // シーン削除ボタン
    document.querySelectorAll('.delete-scene-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation(); // 行クリックイベントを防ぐ
            const sceneId = this.dataset.sceneId;
            deleteScene(sceneId);
        });
    });
    
    // ドラッグ&ドロップ機能の初期化
    initializeDragAndDrop();
}

/**
 * 新しいシーンを追加
 */
async function addNewScene() {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    try {
        Loading.show('新しいシーンを追加中...');
        
        const newSceneData = {
            project_id: AppState.currentProject.id,
            start_time: '0:00',
            lyrics: '',
            description: '',
            image_prompt: ''
        };
        
        const response = await API.post('api/scenes.php', newSceneData);
        
        if (response.success) {
            await loadSceneListView(AppState.currentProject.id);
            Notification.success('新しいシーンを追加しました');
        } else {
            throw new Error(response.error?.message || 'シーンの追加に失敗しました');
        }
        
    } catch (error) {
        Notification.error(`シーンの追加に失敗しました: ${error.message}`);
    } finally {
        Loading.hide();
    }
}

/**
 * シーンフィールドを保存
 */
async function saveSceneField(fieldElement) {
    const sceneId = fieldElement.dataset.sceneId;
    const fieldName = fieldElement.dataset.field;
    const value = fieldElement.value;
    
    if (!sceneId || !fieldName || !AppState.currentProject) {
        return;
    }
    
    try {
        const updateData = {
            id: sceneId,
            project_id: AppState.currentProject.id,
            [fieldName]: value
        };
        
        const response = await API.put(`api/scenes.php?id=${sceneId}&project_id=${AppState.currentProject.id}`, updateData);
        
        if (!response.success) {
            throw new Error(response.error?.message || '保存に失敗しました');
        }
        
        // 保存成功の視覚的フィードバック
        fieldElement.style.backgroundColor = '#ecfdf5';
        fieldElement.style.borderColor = '#10b981';
        setTimeout(() => {
            fieldElement.style.backgroundColor = '';
            fieldElement.style.borderColor = '';
        }, 1000);
        
    } catch (error) {
        Notification.error(`保存に失敗しました: ${error.message}`);
        fieldElement.style.backgroundColor = '#fef2f2';
        fieldElement.style.borderColor = '#ef4444';
        setTimeout(() => {
            fieldElement.style.backgroundColor = '';
            fieldElement.style.borderColor = '';
        }, 2000);
    }
}

/**
 * シーンを削除
 */
async function deleteScene(sceneId) {
    if (!confirm('このシーンを削除しますか？')) {
        return;
    }
    
    try {
        Loading.show('シーンを削除中...');
        
        const response = await API.delete(`api/scenes.php?id=${sceneId}`);
        
        if (response.success) {
            await loadSceneListView(AppState.currentProject.id);
            Notification.success('シーンを削除しました');
        } else {
            throw new Error(response.error?.message || 'シーンの削除に失敗しました');
        }
        
    } catch (error) {
        Notification.error(`シーンの削除に失敗しました: ${error.message}`);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集画面を開く
 */
function openSceneDetail(sceneId) {
    if (!sceneId || !AppState.currentProject) {
        Notification.error('シーンまたはプロジェクトが選択されていません');
        return;
    }
    
    loadSceneDetailView(sceneId);
}

/**
 * ドラッグ&ドロップ機能の初期化
 */
function initializeDragAndDrop() {
    const sceneRows = document.querySelectorAll('.scene-row');
    const tbody = document.querySelector('tbody');
    
    if (!tbody || sceneRows.length === 0) {
        return;
    }
    
    let draggedElement = null;
    let dropIndicator = null;
    
    // ドロップインジケーターを作成
    function createDropIndicator() {
        const indicator = document.createElement('tr');
        indicator.className = 'drop-indicator';
        indicator.innerHTML = '<td colspan="5" class="h-1 bg-blue-500 opacity-75"></td>';
        indicator.style.display = 'none';
        return indicator;
    }
    
    dropIndicator = createDropIndicator();
    tbody.appendChild(dropIndicator);
    
    sceneRows.forEach((row, index) => {
        // ドラッグ開始
        row.addEventListener('dragstart', function(e) {
            draggedElement = this;
            this.style.opacity = '0.5';
            
            // ドラッグデータを設定
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.outerHTML);
            
            // ドラッグ中のスタイル
            this.classList.add('dragging');
            
            // 他の行にドラッグオーバー効果を適用
            sceneRows.forEach(otherRow => {
                if (otherRow !== this) {
                    otherRow.classList.add('drag-mode');
                }
            });
        });
        
        // ドラッグ終了
        row.addEventListener('dragend', function(e) {
            this.style.opacity = '';
            this.classList.remove('dragging');
            
            // 全ての行からドラッグ関連のクラスを削除
            sceneRows.forEach(otherRow => {
                otherRow.classList.remove('drag-mode', 'drag-over', 'drop-above', 'drop-below');
            });
            
            // ドロップインジケーターを非表示
            if (dropIndicator) {
                dropIndicator.style.display = 'none';
            }
        });
        
        // ドラッグオーバー
        row.addEventListener('dragover', function(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            if (draggedElement && draggedElement !== this) {
                const rect = this.getBoundingClientRect();
                const midpoint = rect.top + rect.height / 2;
                const insertBefore = e.clientY < midpoint;
                
                // 既存のドロップ効果をクリア
                sceneRows.forEach(otherRow => {
                    otherRow.classList.remove('drop-above', 'drop-below');
                });
                
                // ドロップ位置を視覚的に表示
                if (insertBefore) {
                    this.classList.add('drop-above');
                } else {
                    this.classList.add('drop-below');
                }
                
                // ドロップインジケーターの位置を更新
                if (dropIndicator) {
                    dropIndicator.style.display = 'table-row';
                    
                    if (insertBefore) {
                        this.parentNode.insertBefore(dropIndicator, this);
                    } else {
                        this.parentNode.insertBefore(dropIndicator, this.nextSibling);
                    }
                }
            }
        });
        
        // ドラッグエンター
        row.addEventListener('dragenter', function(e) {
            e.preventDefault();
            if (draggedElement && draggedElement !== this) {
                this.classList.add('drag-over');
            }
        });
        
        // ドラッグリーブ
        row.addEventListener('dragleave', function(e) {
            // リーブイベントが子要素で発生した場合は無視
            if (!this.contains(e.relatedTarget)) {
                this.classList.remove('drag-over', 'drop-above', 'drop-below');
            }
        });
        
        // ドロップ
        row.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('drag-over', 'drop-above', 'drop-below');
            
            if (draggedElement && draggedElement !== this) {
                const rect = this.getBoundingClientRect();
                const midpoint = rect.top + rect.height / 2;
                const insertBefore = e.clientY < midpoint;
                
                // 新しい順序を計算
                const allRows = Array.from(tbody.querySelectorAll('.scene-row'));
                const currentIndex = allRows.indexOf(draggedElement);
                const targetIndex = allRows.indexOf(this);
                
                let newIndex;
                if (insertBefore) {
                    newIndex = targetIndex;
                } else {
                    newIndex = targetIndex + 1;
                }
                
                // 同じ位置の場合は何もしない
                if (currentIndex === newIndex || (currentIndex + 1 === newIndex && !insertBefore)) {
                    return;
                }
                
                // DOM要素を移動
                if (insertBefore) {
                    this.parentNode.insertBefore(draggedElement, this);
                } else {
                    this.parentNode.insertBefore(draggedElement, this.nextSibling);
                }
                
                // 新しい順序でシーンを並び替え
                updateSceneOrder();
            }
        });
        
        // ドラッグハンドルのみでドラッグを開始するように制限
        const dragHandle = row.querySelector('.drag-handle');
        if (dragHandle) {
            dragHandle.addEventListener('mousedown', function(e) {
                // ドラッグハンドルがクリックされた時のみドラッグを有効にする
                row.draggable = true;
            });
        }
        
        // その他の場所がクリックされた時はドラッグを無効にする
        row.addEventListener('mousedown', function(e) {
            if (!e.target.closest('.drag-handle')) {
                row.draggable = false;
            }
        });
        
        // マウスアップ時にドラッグを再度有効にする（デフォルト状態に戻す）
        row.addEventListener('mouseup', function(e) {
            row.draggable = true;
        });
    });
}

/**
 * シーンの順序を更新
 */
async function updateSceneOrder() {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    try {
        // 現在の行の順序を取得
        const sceneRows = document.querySelectorAll('.scene-row');
        const sceneIds = Array.from(sceneRows).map(row => row.dataset.sceneId);
        
        if (sceneIds.length === 0) {
            return;
        }
        
        Loading.show('シーンの順序を更新中...');
        
        // API呼び出しでシーンの順序を更新
        const response = await API.post('api/scenes.php', {
            action: 'reorder',
            project_id: AppState.currentProject.id,
            scene_ids: sceneIds
        });
        
        if (response.success) {
            Notification.success('シーンの順序を更新しました');
        } else {
            throw new Error(response.error?.message || 'シーンの順序更新に失敗しました');
        }
        
    } catch (error) {
        Notification.error(`シーンの順序更新に失敗しました: ${error.message}`);
        
        // エラー時はシーン一覧を再読み込みして元の順序に戻す
        await loadSceneListView(AppState.currentProject.id);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集画面を読み込み
 */
async function loadSceneDetailView(sceneId) {
    try {
        Loading.show('シーン詳細を読み込み中...');
        
        // シーン詳細を取得
        const sceneResponse = await API.get('api/scenes.php', { 
            project_id: AppState.currentProject.id,
            id: sceneId 
        });
        
        if (!sceneResponse.success) {
            throw new Error(sceneResponse.error?.message || 'シーン詳細の読み込みに失敗しました');
        }
        
        // 現在のシーンを設定
        AppState.currentScene = sceneResponse.data;
        
        // シーン詳細編集画面を描画
        renderSceneDetailView(sceneResponse.data);
        
    } catch (error) {
        Notification.error('シーン詳細の読み込みに失敗しました');
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集画面の描画
 */
function renderSceneDetailView(scene) {
    const mainContent = document.getElementById('main-content');
    
    const sceneDetailHTML = `
        <div class="p-6 max-w-4xl mx-auto">
            <!-- ヘッダー -->
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">シーン詳細編集</h2>
                <div class="space-x-2">
                    <button id="save-scene-btn" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">保存</button>
                    <button id="back-to-list-btn" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">キャンセル</button>
                </div>
            </div>

            <form id="scene-detail-form">
                <!-- 基本情報 -->
                <div class="bg-white p-6 rounded-lg shadow mb-6">
                    <h3 class="text-lg font-semibold mb-4">基本情報</h3>
                    <div class="grid grid-cols-1 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">開始時間</label>
                            <input type="text" id="scene-start-time" name="start_time" value="${scene.start_time || '0:00'}" 
                                   class="w-32 px-3 py-2 border border-gray-300 rounded" placeholder="0:00">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">歌詞</label>
                            <textarea id="scene-lyrics" name="lyrics" 
                                      class="w-full px-3 py-2 border border-gray-300 rounded h-20" 
                                      placeholder="歌詞を入力">${scene.lyrics || ''}</textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">シーン説明</label>
                            <textarea id="scene-description" name="description" 
                                      class="w-full px-3 py-2 border border-gray-300 rounded h-20" 
                                      placeholder="シーン説明を入力">${scene.description || ''}</textarea>
                        </div>
                    </div>
                </div>

                <!-- 画像設定 -->
                <div class="bg-white p-6 rounded-lg shadow mb-6">
                    <h3 class="text-lg font-semibold mb-4">画像設定</h3>
                    <div class="grid grid-cols-2 gap-6">
                        <!-- 左側: プロンプト -->
                        <div>
                            <label class="block text-sm font-medium mb-2">画像生成プロンプト</label>
                            <textarea id="scene-image-prompt" name="image_prompt" 
                                      class="w-full px-3 py-2 border border-gray-300 rounded h-32" 
                                      placeholder="画像生成プロンプトを入力">${scene.image_prompt || ''}</textarea>
                        </div>
                        <!-- 右側: 画像ファイル -->
                        <div>
                            <label class="block text-sm font-medium mb-2">画像ファイル</label>
                            <div class="space-y-3">
                                <button type="button" id="select-image-btn" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                                    メディアライブラリから選択
                                </button>
                                <div class="border-2 border-dashed border-gray-300 rounded-lg p-4">
                                    ${scene.image_file_id ? `
                                    <!-- 画像が設定されている場合 -->
                                    <div class="image-preview">
                                        <img src="data/projects/${AppState.currentProject.id}/media/images/${scene.image_file_id}" 
                                             alt="設定された画像" class="max-w-full h-32 object-contain mx-auto rounded"
                                             onerror="this.parentElement.innerHTML='<div class=\\"text-center py-8 text-gray-500\\"><p class=\\"text-sm\\">画像の読み込みに失敗しました</p></div>'">
                                        <p class="text-center text-sm text-gray-600 mt-2">${scene.image_file_id}</p>
                                    </div>
                                    ` : `
                                    <!-- 画像が未設定の場合 -->
                                    <div class="image-placeholder text-center py-8 text-gray-500">
                                        <svg class="w-12 h-12 mx-auto mb-2" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                                        </svg>
                                        <p class="text-sm">画像が設定されていません</p>
                                    </div>
                                    `}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 動画設定 -->
                <div class="bg-white p-6 rounded-lg shadow">
                    <h3 class="text-lg font-semibold mb-4">動画設定</h3>
                    <div class="grid grid-cols-2 gap-6">
                        <!-- 左側: プロンプト -->
                        <div>
                            <label class="block text-sm font-medium mb-2">動画生成プロンプト</label>
                            <textarea id="scene-video-prompt" name="video_prompt" 
                                      class="w-full px-3 py-2 border border-gray-300 rounded h-32" 
                                      placeholder="動画生成プロンプトを入力">${scene.video_prompt || ''}</textarea>
                        </div>
                        <!-- 右側: 動画ファイル -->
                        <div>
                            <label class="block text-sm font-medium mb-2">動画ファイル</label>
                            <div class="space-y-3">
                                <button type="button" id="select-video-btn" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                                    メディアライブラリから選択
                                </button>
                                <div class="border-2 border-dashed border-gray-300 rounded-lg p-4">
                                    ${scene.video_file_id ? `
                                    <!-- 動画が設定されている場合 -->
                                    <div class="video-preview">
                                        <video class="max-w-full h-40 mx-auto rounded" controls>
                                            <source src="data/projects/${AppState.currentProject.id}/media/videos/${scene.video_file_id}" type="video/mp4">
                                            お使いのブラウザは動画タグをサポートしていません。
                                        </video>
                                        <p class="text-center text-sm text-gray-600 mt-2">${scene.video_file_id}</p>
                                    </div>
                                    ` : `
                                    <!-- 動画が未設定の場合 -->
                                    <div class="video-placeholder text-center py-12 text-gray-500">
                                        <svg class="w-12 h-12 mx-auto mb-2" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M2 6a2 2 0 012-2h6l2 2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM5 8a1 1 0 011-1h1a1 1 0 010 2H6a1 1 0 01-1-1zm6 1a1 1 0 100 2h3a1 1 0 100-2h-3z"></path>
                                        </svg>
                                        <p class="text-sm">動画が設定されていません</p>
                                    </div>
                                    `}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    `;
    
    mainContent.innerHTML = sceneDetailHTML;
    
    // イベントリスナーを設定
    setupSceneDetailEventListeners();
}

/**
 * シーン詳細編集画面のイベントリスナー設定
 */
function setupSceneDetailEventListeners() {
    // 戻るボタン（キャンセル）
    const backBtn = document.getElementById('back-to-list-btn');
    if (backBtn) {
        backBtn.addEventListener('click', () => {
            loadSceneListView(AppState.currentProject.id);
        });
    }
    
    // 保存ボタン
    const saveBtn = document.getElementById('save-scene-btn');
    if (saveBtn) {
        saveBtn.addEventListener('click', () => {
            saveSceneDetail();
        });
    }
    
    // フォーム送信
    const form = document.getElementById('scene-detail-form');
    if (form) {
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            saveSceneDetail();
        });
    }
    
    // 画像選択ボタン
    const selectImageBtn = document.getElementById('select-image-btn');
    if (selectImageBtn) {
        selectImageBtn.addEventListener('click', () => {
            Notification.info('メディアライブラリ機能は今後実装予定です');
        });
    }
    
    // 動画選択ボタン
    const selectVideoBtn = document.getElementById('select-video-btn');
    if (selectVideoBtn) {
        selectVideoBtn.addEventListener('click', () => {
            Notification.info('メディアライブラリ機能は今後実装予定です');
        });
    }
}

/**
 * シーン詳細を保存
 */
async function saveSceneDetail() {
    if (!AppState.currentScene || !AppState.currentProject) {
        Notification.error('シーンまたはプロジェクトが選択されていません');
        return;
    }
    
    try {
        Loading.show('シーン詳細を保存中...');
        
        const form = document.getElementById('scene-detail-form');
        const formData = new FormData(form);
        
        const updateData = {
            id: AppState.currentScene.id,
            project_id: AppState.currentProject.id,
            start_time: formData.get('start_time'),
            lyrics: formData.get('lyrics'),
            description: formData.get('description'),
            image_prompt: formData.get('image_prompt'),
            video_prompt: formData.get('video_prompt')
        };
        
        const response = await API.put(`api/scenes.php?id=${AppState.currentScene.id}&project_id=${AppState.currentProject.id}`, updateData);
        
        if (response.success) {
            AppState.currentScene = response.data;
            Notification.success('シーン詳細を保存しました');
        } else {
            throw new Error(response.error?.message || 'シーン詳細の保存に失敗しました');
        }
        
    } catch (error) {
        Notification.error(error.message || 'シーン詳細の保存に失敗しました');
    } finally {
        Loading.hide();
    }
}

/**
 * プロジェクト編集モーダルを表示
 */
async function showEditProjectModal(projectId) {
    try {
        // プロジェクト情報を取得
        const response = await API.get('api/projects.php', { id: projectId });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'プロジェクト情報の取得に失敗しました');
        }
        
        const project = response.data;
        
        const modalContent = `
            <form id="edit-project-form">
                <div class="space-y-4">
                    <div>
                        <label for="edit-project-name" class="block text-sm font-medium text-gray-700 mb-2">楽曲名</label>
                        <input type="text" id="edit-project-name" name="name" required
                               value="${Utils.escapeHtml(project.name)}"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               placeholder="楽曲名を入力してください">
                    </div>
                    <div>
                        <label for="edit-project-notes" class="block text-sm font-medium text-gray-700 mb-2">備考</label>
                        <textarea id="edit-project-notes" name="notes" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder="備考を入力してください（任意）">${Utils.escapeHtml(project.notes || '')}</textarea>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="Modal.close()" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            キャンセル
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            更新
                        </button>
                    </div>
                </div>
            </form>
        `;
        
        Modal.create('プロジェクト編集', modalContent);
        
        // フォーム送信イベント
        document.getElementById('edit-project-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const updateData = {
                name: formData.get('name'),
                notes: formData.get('notes') || ''
            };
            
            try {
                Loading.show('プロジェクトを更新中...');
                
                const updateResponse = await API.put(`api/projects.php?id=${projectId}`, updateData);
                
                if (updateResponse.success) {
                    Modal.close();
                    Notification.success('プロジェクトを更新しました');
                    
                    // プロジェクト一覧を再読み込み
                    await loadProjectList();
                    
                    // 現在のプロジェクトが更新された場合、ページタイトルも更新
                    if (AppState.currentProject && AppState.currentProject.id === projectId) {
                        AppState.currentProject.name = updateData.name;
                        AppState.currentProject.notes = updateData.notes;
                        updatePageTitle(updateData.name);
                    }
                } else {
                    throw new Error(updateResponse.error?.message || 'プロジェクトの更新に失敗しました');
                }
                
            } catch (error) {
                Notification.error(error.message || 'プロジェクトの更新に失敗しました');
            } finally {
                Loading.hide();
            }
        });
        
        // 楽曲名フィールドにフォーカス
        setTimeout(() => {
            document.getElementById('edit-project-name').focus();
        }, 100);
        
    } catch (error) {
        Notification.error('プロジェクト情報の取得に失敗しました');
    }
}

/**
 * プロジェクト削除確認ダイアログを表示
 */
async function showDeleteProjectConfirm(projectId) {
    try {
        // プロジェクト情報を取得
        const response = await API.get('api/projects.php', { id: projectId });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'プロジェクト情報の取得に失敗しました');
        }
        
        const project = response.data;
        
        const modalContent = `
            <div class="text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                    <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">プロジェクトを削除</h3>
                <div class="mb-6">
                    <p class="text-sm text-gray-500 mb-3">
                        以下のプロジェクトを削除しますか？この操作は取り消せません。
                    </p>
                    <div class="bg-gray-50 rounded-lg p-4 text-left">
                        <h4 class="font-medium text-gray-900">${Utils.escapeHtml(project.name)}</h4>
                        ${project.notes ? `<p class="text-sm text-gray-600 mt-1">${Utils.escapeHtml(project.notes)}</p>` : ''}
                    </div>
                    <p class="text-sm text-red-600 mt-3">
                        ※ プロジェクトに関連するすべてのシーンとメディアファイルも削除されます
                    </p>
                </div>
                <div class="flex justify-center space-x-3">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        キャンセル
                    </button>
                    <button type="button" id="confirm-delete-btn"
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        削除する
                    </button>
                </div>
            </div>
        `;
        
        Modal.create('プロジェクト削除の確認', modalContent);
        
        // 削除確認ボタンのイベント
        document.getElementById('confirm-delete-btn').addEventListener('click', async function() {
            try {
                Loading.show('プロジェクトを削除中...');
                
                const deleteResponse = await API.delete('api/projects.php', { id: projectId });
                
                if (deleteResponse.success) {
                    Modal.close();
                    Notification.success('プロジェクトを削除しました');
                    
                    // 削除されたプロジェクトが現在選択中の場合、状態をクリア
                    if (AppState.currentProject && AppState.currentProject.id === projectId) {
                        AppState.currentProject = null;
                        
                        // メイン画面をプロジェクト選択画面に戻す
                        const mainContent = document.getElementById('main-content');
                        mainContent.innerHTML = `
                            <div class="flex items-center justify-center h-full">
                                <div class="text-center">
                                    <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                    </svg>
                                    <h2 class="text-xl font-semibold text-gray-700 mb-2">プロジェクトを選択してください</h2>
                                    <p class="text-gray-500 mb-6">サイドメニューからプロジェクトを選択するか、新規作成してください</p>
                                    <button id="get-started-btn" class="inline-flex items-center px-6 py-3 text-base font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                        </svg>
                                        新規プロジェクト作成
                                    </button>
                                </div>
                            </div>
                        `;
                        
                        // ページタイトルをリセット
                        updatePageTitle('Music Video Creator');
                        
                        // 新規プロジェクトボタンのイベントを再設定
                        document.getElementById('get-started-btn').addEventListener('click', showCreateProjectModal);
                    }
                    
                    // プロジェクト一覧を再読み込み
                    await loadProjectList();
                    
                } else {
                    throw new Error(deleteResponse.error?.message || 'プロジェクトの削除に失敗しました');
                }
                
            } catch (error) {
                Notification.error(error.message || 'プロジェクトの削除に失敗しました');
            } finally {
                Loading.hide();
            }
        });
        
    } catch (error) {
        Notification.error('プロジェクト情報の取得に失敗しました');
    }
}
/*
*
 * インライン編集のイベントリスナー設定
 */
function setupInlineEditListeners() {
    document.querySelectorAll('.scene-field').forEach(field => {
        // フォーカス時の処理
        field.addEventListener('focus', function() {
            this.classList.add('editing');
        });
        
        // フォーカス離脱時の自動保存
        field.addEventListener('blur', async function() {
            this.classList.remove('editing');
            await saveSceneField(this);
        });
        
        // Enterキーでの保存（テキストエリア以外）
        field.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && this.tagName !== 'TEXTAREA') {
                e.preventDefault();
                this.blur();
            }
        });
    });
}

/**
 * シーンフィールドの保存
 */
async function saveSceneField(fieldElement) {
    const sceneId = fieldElement.dataset.sceneId;
    const fieldName = fieldElement.dataset.field;
    const value = fieldElement.value;
    
    try {
        const updateData = {
            [fieldName]: value
        };
        
        const response = await API.put(`api/scenes.php?id=${sceneId}&project_id=${AppState.currentProject.id}`, updateData);
        
        if (response.success) {
            // 成功時の視覚的フィードバック
            fieldElement.classList.add('saved');
            setTimeout(() => {
                fieldElement.classList.remove('saved');
            }, 1000);
        } else {
            throw new Error(response.error?.message || 'シーンの更新に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの更新に失敗しました: ' + error.message);
        
        // エラー時の視覚的フィードバック
        fieldElement.classList.add('error');
        setTimeout(() => {
            fieldElement.classList.remove('error');
        }, 2000);
    }
}

/**
 * 新規シーン追加
 */
async function addNewScene() {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    try {
        Loading.show('新規シーンを追加中...');
        
        const newSceneData = {
            project_id: AppState.currentProject.id,
            start_time: '0:00',
            lyrics: '',
            description: '',
            image_prompt: '',
            video_prompt: ''
        };
        
        const response = await API.post('api/scenes.php', newSceneData);
        
        if (response.success) {
            Notification.success('新規シーンを追加しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(response.error?.message || 'シーンの追加に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの追加に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン削除
 */
async function deleteScene(sceneId) {
    if (!confirm('このシーンを削除しますか？')) {
        return;
    }
    
    try {
        Loading.show('シーンを削除中...');
        
        const response = await API.delete('api/scenes.php', {
            id: sceneId,
            project_id: AppState.currentProject.id
        });
        
        if (response.success) {
            Notification.success('シーンを削除しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(response.error?.message || 'シーンの削除に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの削除に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集画面を開く
 */
async function openSceneDetail(sceneId) {
    try {
        Loading.show('シーン詳細を読み込み中...');
        
        // シーン情報を取得
        const response = await API.get('api/scenes.php', {
            id: sceneId,
            project_id: AppState.currentProject.id
        });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'シーン情報の取得に失敗しました');
        }
        
        AppState.currentScene = response.data;
        
        // シーン詳細編集モーダルを表示
        showSceneDetailModal();
        
    } catch (error) {
        Notification.error('シーン詳細の読み込みに失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集モーダルを表示
 */
function showSceneDetailModal() {
    if (!AppState.currentScene) {
        Notification.error('シーンが選択されていません');
        return;
    }
    
    const scene = AppState.currentScene;
    
    const modalContent = `
        <form id="scene-detail-form">
            <div class="space-y-6">
                <!-- 基本情報 -->
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="scene-start-time" class="block text-sm font-medium text-gray-700 mb-2">開始時間</label>
                        <input type="text" id="scene-start-time" name="start_time" 
                               value="${Utils.escapeHtml(scene.start_time || '')}"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               placeholder="0:00">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">サムネイル</label>
                        <div class="w-16 h-16 bg-gray-100 rounded-lg overflow-hidden">
                            ${scene.image_file_id ? 
                                `<img src="data/projects/${AppState.currentProject.id}/media/images/${scene.image_file_id}" alt="サムネイル" class="w-full h-full object-cover">` :
                                `<div class="w-full h-full flex items-center justify-center text-gray-400">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                </div>`
                            }
                        </div>
                    </div>
                </div>
                
                <!-- 歌詞 -->
                <div>
                    <label for="scene-lyrics" class="block text-sm font-medium text-gray-700 mb-2">歌詞</label>
                    <textarea id="scene-lyrics" name="lyrics" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="歌詞を入力してください">${Utils.escapeHtml(scene.lyrics || '')}</textarea>
                </div>
                
                <!-- シーン説明 -->
                <div>
                    <label for="scene-description" class="block text-sm font-medium text-gray-700 mb-2">シーン説明</label>
                    <textarea id="scene-description" name="description" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="シーンの説明を入力してください">${Utils.escapeHtml(scene.description || '')}</textarea>
                </div>
                
                <!-- 画像生成プロンプト -->
                <div>
                    <label for="scene-image-prompt" class="block text-sm font-medium text-gray-700 mb-2">画像生成プロンプト</label>
                    <textarea id="scene-image-prompt" name="image_prompt" rows="4"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="画像生成用の英語プロンプトを入力してください">${Utils.escapeHtml(scene.image_prompt || '')}</textarea>
                </div>
                
                <!-- 動画生成プロンプト -->
                <div>
                    <label for="scene-video-prompt" class="block text-sm font-medium text-gray-700 mb-2">動画生成プロンプト</label>
                    <textarea id="scene-video-prompt" name="video_prompt" rows="4"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="動画生成用の英語プロンプトを入力してください">${Utils.escapeHtml(scene.video_prompt || '')}</textarea>
                </div>
                
                <!-- メディアファイル選択 -->
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">画像ファイル</label>
                        <button type="button" id="select-image-btn" class="w-full px-3 py-2 text-sm text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                            ${scene.image_file_id ? '画像を変更' : '画像を選択'}
                        </button>
                        ${scene.image_file_id ? `<p class="text-xs text-gray-500 mt-1">現在: ${scene.image_file_id}</p>` : ''}
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">動画ファイル</label>
                        <button type="button" id="select-video-btn" class="w-full px-3 py-2 text-sm text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                            ${scene.video_file_id ? '動画を変更' : '動画を選択'}
                        </button>
                        ${scene.video_file_id ? `<p class="text-xs text-gray-500 mt-1">現在: ${scene.video_file_id}</p>` : ''}
                    </div>
                </div>
                
                <!-- ボタン -->
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        キャンセル
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        保存
                    </button>
                </div>
            </div>
        </form>
    `;
    
    Modal.create('シーン詳細編集', modalContent, 'max-w-3xl');
    
    // フォーム送信イベント
    document.getElementById('scene-detail-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        await saveSceneDetail();
    });
    
    // メディア選択ボタンのイベント
    document.getElementById('select-image-btn').addEventListener('click', () => {
        showMediaSelectionModal('image');
    });
    
    document.getElementById('select-video-btn').addEventListener('click', () => {
        showMediaSelectionModal('video');
    });
}

/**
 * シーンファイルアップロードモーダルを表示
 */
function showSceneFileUploadModal() {
    const modalContent = `
        <div class="space-y-6">
            <div class="text-center">
                <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-2">シーンファイルをアップロード</h3>
                <p class="text-sm text-gray-500">テキストファイルまたはCSVファイルから複数のシーンを一括登録できます</p>
            </div>
            
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">ファイル形式</label>
                    <div class="space-y-2">
                        <label class="flex items-center">
                            <input type="radio" name="file-type" value="text" checked class="mr-2">
                            <span class="text-sm">テキストファイル (.txt) - 歌詞を改行で区切った簡易形式</span>
                        </label>
                        <label class="flex items-center">
                            <input type="radio" name="file-type" value="csv" class="mr-2">
                            <span class="text-sm">CSVファイル (.csv) - 詳細情報を含む形式</span>
                        </label>
                    </div>
                </div>
                
                <div>
                    <label for="scene-file-input" class="block text-sm font-medium text-gray-700 mb-2">ファイル選択</label>
                    <input type="file" id="scene-file-input" accept=".txt,.csv" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                </div>
                
                <div class="bg-gray-50 rounded-lg p-4">
                    <h4 class="text-sm font-medium text-gray-900 mb-2">ファイル形式の説明</h4>
                    <div class="text-xs text-gray-600 space-y-2">
                        <div>
                            <strong>テキストファイル:</strong> 各行に歌詞を入力。自動的にシーンとして分割されます。
                        </div>
                        <div>
                            <strong>CSVファイル:</strong> 開始時間,歌詞,説明,画像プロンプト,動画プロンプト の順で入力。
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="Modal.close()" 
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    キャンセル
                </button>
                <button type="button" id="upload-scene-file-btn"
                        class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    アップロード
                </button>
            </div>
        </div>
    `;
    
    Modal.create('シーンファイルアップロード', modalContent);
    
    // アップロードボタンのイベント
    document.getElementById('upload-scene-file-btn').addEventListener('click', handleSceneFileUpload);
}

/**
 * シーンファイルアップロード処理
 */
async function handleSceneFileUpload() {
    const fileInput = document.getElementById('scene-file-input');
    const fileTypeRadios = document.querySelectorAll('input[name="file-type"]');
    
    if (!fileInput.files || fileInput.files.length === 0) {
        Notification.error('ファイルを選択してください');
        return;
    }
    
    const file = fileInput.files[0];
    const fileType = Array.from(fileTypeRadios).find(radio => radio.checked)?.value || 'text';
    
    try {
        Loading.show('シーンファイルをアップロード中...');
        
        const formData = new FormData();
        formData.append('project_id', AppState.currentProject.id);
        formData.append('file', file);
        formData.append('file_type', fileType);
        
        const response = await fetch('api/scenes.php/upload', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            Modal.close();
            Notification.success(`${result.scene_count}個のシーンを追加しました`);
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(result.error?.message || 'シーンファイルのアップロードに失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンファイルのアップロードに失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}
/**
 * シーン詳細の保存
 */
async function saveSceneDetail() {
    if (!AppState.currentScene || !AppState.currentProject) {
        Notification.error('シーンまたはプロジェクトが選択されていません');
        return;
    }
    
    try {
        Loading.show('シーン詳細を保存中...');
        
        const form = document.getElementById('scene-detail-form');
        const formData = new FormData(form);
        
        const updateData = {
            id: AppState.currentScene.id,
            project_id: AppState.currentProject.id,
            start_time: formData.get('start_time'),
            lyrics: formData.get('lyrics'),
            description: formData.get('description'),
            image_prompt: formData.get('image_prompt'),
            video_prompt: formData.get('video_prompt')
        };
        
        const response = await API.put(`api/scenes.php?id=${AppState.currentScene.id}&project_id=${AppState.currentProject.id}`, updateData);
        
        if (response.success) {
            AppState.currentScene = response.data;
            Modal.close();
            Notification.success('シーン詳細を保存しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(response.error?.message || 'シーン詳細の保存に失敗しました');
        }
        
    } catch (error) {
        Notification.error(error.message || 'シーン詳細の保存に失敗しました');
    } finally {
        Loading.hide();
    }
}

                                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-5-9v.01M12 3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-5-9v.01M12 3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                            </div>
                        `}
                        <div class="absolute top-2 right-2">
                            <div class="w-6 h-6 rounded-full bg-white bg-opacity-90 flex items-center justify-center">
                                <input type="checkbox" class="file-checkbox w-4 h-4 text-blue-600 rounded" data-file-id="${file.file_id}">
                            </div>
                        </div>
                    </div>
                    <div class="p-3">
                        <p class="text-sm font-medium text-gray-900 truncate" title="${file.file_id}">${file.file_id}</p>
                        <p class="text-xs text-gray-500">${file.size_formatted}</p>
                        <p class="text-xs text-gray-400">${Utils.formatDate(file.modified_date)}</p>
                    </div>
                </div>
            `;
        }).join('');
        
        mediaGrid.innerHTML = filesHTML;
        
        // ファイルアイテムのイベントリスナー
        mediaGrid.querySelectorAll('.media-item').forEach(item => {
            const checkbox = item.querySelector('.file-checkbox');
            
            // ファイルアイテムクリックで選択状態を切り替え
            item.addEventListener('click', (e) => {
                if (e.target.type !== 'checkbox') {
                    checkbox.checked = !checkbox.checked;
                    checkbox.dispatchEvent(new Event('change'));
                }
            });
            
            // チェックボックス変更時の処理
            checkbox.addEventListener('change', () => {
                const fileId = checkbox.dataset.fileId;
                
                if (checkbox.checked) {
                    selectedFiles.add(fileId);
                    item.classList.add('selected');
                } else {
                    selectedFiles.delete(fileId);
                    item.classList.remove('selected');
                }
                
                updateSelectionInfo();
            });
        });
    }
    
    // 選択情報の更新
    function updateSelectionInfo() {
        const selectionInfo = document.getElementById('selection-info');
        const deleteBtn = document.getElementById('delete-selected-btn');
        
        const count = selectedFiles.size;
        
        if (count === 0) {
            selectionInfo.textContent = 'ファイルが選択されていません';
            deleteBtn.disabled = true;
        } else {
            selectionInfo.textContent = `${count}個のファイルが選択されています`;
            deleteBtn.disabled = false;
        }
    }
    
    // ファイル選択処理
    function handleFileSelect(e) {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ドラッグ&ドロップ処理
    function handleFileDrop(e) {
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルアップロード処理
    async function uploadFiles(files) {
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const statusText = document.getElementById('upload-status');
        
        try {
            // プログレス表示
            progressContainer.classList.remove('hidden');
            progressBar.style.width = '0%';
            progressBar.className = 'h-2 rounded-full transition-all duration-300 bg-blue-500';
            statusText.textContent = 'アップロード中...';
            
            // FormDataを作成
            const formData = new FormData();
            formData.append('project_id', AppState.currentProject.id);
            
            // 複数ファイルを追加
            files.forEach((file, index) => {
                formData.append('files[]', file);
            });
            
            // アップロード実行
            const response = await fetch('api/media.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                // 成功時のプログレス表示
                progressBar.style.width = '100%';
                statusText.textContent = `${result.data.success_count}個のファイルをアップロードしました`;
                
                // 成功通知
                if (result.data.error_count > 0) {
                    Notification.warning(`${result.data.success_count}個のファイルをアップロードしました（${result.data.error_count}個のファイルでエラーが発生）`);
                } else {
                    Notification.success(`${result.data.success_count}個のファイルをアップロードしました`);
                }
                
                // ファイル一覧を再読み込み
                await loadMediaFiles(currentFilter);
                
                // ファイル入力をリセット
                document.getElementById('file-input').value = '';
                
            } else {
                throw new Error(result.error?.message || 'アップロードに失敗しました');
            }
            
        } catch (error) {
            // エラー時のプログレス表示
            progressBar.className = 'h-2 rounded-full transition-all duration-300 bg-red-500';
            progressBar.style.width = '100%';
            statusText.textContent = 'アップロードに失敗しました';
            
            Notification.error(error.message || 'ファイルのアップロードに失敗しました');
        } finally {
            // プログレス非表示（3秒後）
            setTimeout(() => {
                progressContainer.classList.add('hidden');
            }, 3000);
        }
    }
    
    // 選択ファイル削除処理
    async function handleDeleteSelected() {
        if (selectedFiles.size === 0) {
            return;
        }
        
        const fileCount = selectedFiles.size;
        const confirmMessage = `選択した${fileCount}個のファイルを削除しますか？\n\n削除されたファイルは復元できません。また、シーンに関連付けられているファイルは自動的に関連付けが解除されます。`;
        
        if (!confirm(confirmMessage)) {
            return;
        }
        
        try {
            Loading.show('ファイルを削除中...');
            
            const deletePromises = Array.from(selectedFiles).map(async (fileId) => {
                const response = await API.delete('api/media.php', {
                    project_id: AppState.currentProject.id,
                    file_id: fileId
                });
                
                return {
                    fileId,
                    success: response.success,
                    error: response.error?.message
                };
            });
            
            const results = await Promise.all(deletePromises);
            
            // 結果を集計
            const successCount = results.filter(r => r.success).length;
            const errorCount = results.filter(r => !r.success).length;
            
            if (successCount > 0) {
                if (errorCount > 0) {
                    Notification.warning(`${successCount}個のファイルを削除しました（${errorCount}個のファイルで削除に失敗）`);
                } else {
                    Notification.success(`${successCount}個のファイルを削除しました`);
                }
                
                // 選択状態をクリア
                selectedFiles.clear();
                updateSelectionInfo();
                
                // ファイル一覧を再読み込み
                await loadMediaFiles(currentFilter);
            } else {
                Notification.error('ファイルの削除に失敗しました');
            }
            
        } catch (error) {
            Notification.error('ファイルの削除中にエラーが発生しました');
        } finally {
            Loading.hide();
        }
    }
}
/**

 * メディア選択モーダルを表示（シーン詳細編集用）
 */
async function showMediaSelectionModal(fileType) {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    const modalContent = `
        <div class="media-selection-container">
            <!-- ヘッダー -->
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900">
                    ${fileType === 'image' ? '画像' : '動画'}ファイルを選択
                </h3>
                <button id="open-media-library-btn" class="px-3 py-1 text-sm text-blue-600 hover:text-blue-700 transition-colors">
                    メディアライブラリを開く
                </button>
            </div>
            
            <!-- ファイル一覧 -->
            <div class="max-h-96 overflow-y-auto">
                <div id="media-selection-grid" class="grid grid-cols-3 gap-3 min-h-32">
                    <!-- ファイルアイテムがここに表示される -->
                    <div class="flex items-center justify-center col-span-3 py-8">
                        <div class="text-center">
                            <svg class="w-8 h-8 mx-auto text-gray-300 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            <p class="text-gray-500 text-sm">読み込み中...</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 現在の選択 -->
            <div id="current-selection" class="mt-4 p-3 bg-gray-50 rounded-lg">
                <p class="text-sm text-gray-600">選択されていません</p>
            </div>
            
            <!-- フッター -->
            <div class="flex justify-between items-center pt-4 border-t border-gray-200 mt-4">
                <button id="remove-file-btn" class="px-4 py-2 text-sm font-medium text-red-600 bg-white border border-red-300 rounded-md hover:bg-red-50 transition-colors" disabled>
                    関連付けを解除
                </button>
                <div class="space-x-2">
                    <button onclick="Modal.close()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        キャンセル
                    </button>
                    <button id="select-file-btn" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors" disabled>
                        選択
                    </button>
                </div>
            </div>
        </div>
    `;
    
    Modal.create(`${fileType === 'image' ? '画像' : '動画'}ファイル選択`, modalContent, 'max-w-2xl');
    
    // メディア選択の初期化
    await initializeMediaSelection(fileType);
}

/**
 * メディア選択の初期化
 */
async function initializeMediaSelection(fileType) {
    let selectedFileId = null;
    let currentFileId = AppState.currentScene[`${fileType}_file_id`] || null;
    
    // ファイル一覧を読み込み
    await loadMediaSelectionFiles(fileType);
    
    // メディアライブラリボタン
    document.getElementById('open-media-library-btn').addEventListener('click', async () => {
        // 現在のモーダルを閉じてメディアライブラリを開く
        Modal.close();
        await showMediaLibrary();
    });
    
    // 関連付け解除ボタン
    document.getElementById('remove-file-btn').addEventListener('click', async () => {
        if (await confirmRemoveFileAssociation(fileType)) {
            await removeFileAssociation(fileType);
            Modal.close();
        }
    });
    
    // 選択ボタン
    document.getElementById('select-file-btn').addEventListener('click', async () => {
        if (selectedFileId) {
            await associateFileWithScene(fileType, selectedFileId);
            Modal.close();
        }
    });
    
    // 現在の選択状態を更新
    updateCurrentSelection(fileType, currentFileId);
    
    // 関連付け解除ボタンの状態を更新
    document.getElementById('remove-file-btn').disabled = !currentFileId;
    
    // ファイル一覧読み込み
    async function loadMediaSelectionFiles(filterType) {
        try {
            const response = await API.get('api/media.php', {
                project_id: AppState.currentProject.id,
                filter: filterType
            });
            
            if (response.success) {
                renderMediaSelectionFiles(response.data || [], filterType);
            } else {
                throw new Error(response.error?.message || 'ファイル一覧の読み込みに失敗しました');
            }
        } catch (error) {
            Notification.error('ファイル一覧の読み込みに失敗しました');
            renderMediaSelectionFiles([], filterType);
        }
    }
    
    // ファイル一覧の描画
    function renderMediaSelectionFiles(files, filterType) {
        const mediaGrid = document.getElementById('media-selection-grid');
        
        if (!files || files.length === 0) {
            mediaGrid.innerHTML = `
                <div class="flex items-center justify-center col-span-3 py-8">
                    <div class="text-center">
                        <svg class="w-12 h-12 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <h4 class="text-sm font-medium text-gray-700 mb-1">${filterType === 'image' ? '画像' : '動画'}ファイルがありません</h4>
                        <p class="text-xs text-gray-500">メディアライブラリからファイルをアップロードしてください</p>
                    </div>
                </div>
            `;
            return;
        }
        
        const filesHTML = files.map(file => {
            const isImage = file.file_type === 'image';
            const fileUrl = `data/projects/${AppState.currentProject.id}/media/${isImage ? 'images' : 'videos'}/${file.file_id}`;
            const isCurrentFile = file.file_id === currentFileId;
            
            return `
                <div class="media-selection-item border-2 rounded-lg overflow-hidden cursor-pointer transition-all hover:shadow-md ${isCurrentFile ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}" 
                     data-file-id="${file.file_id}">
                    <div class="aspect-square bg-gray-100 relative">
                        ${isImage ? `
                            <img src="${fileUrl}" alt="${file.file_id}" class="w-full h-full object-cover">
                        ` : `
                            <div class="w-full h-full bg-gray-800 flex items-center justify-center">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-5-9v.01M12 3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                        `}
                        ${isCurrentFile ? `
                            <div class="absolute top-1 right-1">
                                <div class="w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center">
                                    <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                    <div class="p-2">
                        <p class="text-xs font-medium text-gray-900 truncate" title="${file.file_id}">${file.file_id}</p>
                        <p class="text-xs text-gray-500">${file.size_formatted}</p>
                    </div>
                </div>
            `;
        }).join('');
        
        mediaGrid.innerHTML = filesHTML;
        
        // ファイルアイテムのイベントリスナー
        mediaGrid.querySelectorAll('.media-selection-item').forEach(item => {
            item.addEventListener('click', () => {
                const fileId = item.dataset.fileId;
                
                // 選択状態を更新
                mediaGrid.querySelectorAll('.media-selection-item').forEach(i => {
                    i.classList.remove('border-green-500', 'bg-green-50');
                    i.classList.add('border-gray-200');
                });
                
                item.classList.remove('border-gray-200');
                item.classList.add('border-green-500', 'bg-green-50');
                
                selectedFileId = fileId;
                document.getElementById('select-file-btn').disabled = false;
                
                // プレビューを更新
                updateSelectionPreview(fileType, fileId);
            });
        });
    }
    
    // 選択プレビューの更新
    function updateSelectionPreview(filterType, fileId) {
        const currentSelection = document.getElementById('current-selection');
        
        if (fileId) {
            currentSelection.innerHTML = `
                <div class="flex items-center space-x-3">
                    <div class="w-12 h-12 bg-gray-100 rounded overflow-hidden">
                        ${filterType === 'image' ? `
                            <img src="data/projects/${AppState.currentProject.id}/media/images/${fileId}" alt="プレビュー" class="w-full h-full object-cover">
                        ` : `
                            <div class="w-full h-full bg-gray-800 flex items-center justify-center">
                                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-5-9v.01M12 3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                        `}
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-900">${fileId}</p>
                        <p class="text-xs text-gray-500">選択中</p>
                    </div>
                </div>
            `;
        } else {
            currentSelection.innerHTML = '<p class="text-sm text-gray-600">選択されていません</p>';
        }
    }
}

// 現在の選択状態を更新
function updateCurrentSelection(fileType, fileId) {
    const currentSelection = document.getElementById('current-selection');
    
    if (fileId) {
        currentSelection.innerHTML = `
            <div class="flex items-center space-x-3">
                <div class="w-12 h-12 bg-gray-100 rounded overflow-hidden">
                    ${fileType === 'image' ? `
                        <img src="data/projects/${AppState.currentProject.id}/media/images/${fileId}" alt="現在の選択" class="w-full h-full object-cover">
                    ` : `
                        <div class="w-full h-full bg-gray-800 flex items-center justify-center">
                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-5-9v.01M12 3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                    `}
                </div>
                <div>
                    <p class="text-sm font-medium text-gray-900">${fileId}</p>
                    <p class="text-xs text-gray-500">現在関連付けられています</p>
                </div>
            </div>
        `;
    } else {
        currentSelection.innerHTML = '<p class="text-sm text-gray-600">関連付けられていません</p>';
    }
}

// ファイル関連付け解除の確認
async function confirmRemoveFileAssociation(fileType) {
    const fileTypeName = fileType === 'image' ? '画像' : '動画';
    return confirm(`この${fileTypeName}ファイルの関連付けを解除しますか？`);
}

// ファイル関連付けを解除
async function removeFileAssociation(fileType) {
    try {
        Loading.show('関連付けを解除中...');
        
        const response = await API.post('api/media.php', {
            action: 'remove_association',
            project_id: AppState.currentProject.id,
            scene_id: AppState.currentScene.id,
            file_type: fileType
        });
        
        if (response.success) {
            // シーン情報を更新
            AppState.currentScene[`${fileType}_file_id`] = null;
            
            Notification.success('ファイルの関連付けを解除しました');
            
            // シーン詳細モーダルを再表示
            showSceneDetailModal();
        } else {
            throw new Error(response.error?.message || '関連付けの解除に失敗しました');
        }
        
    } catch (error) {
        Notification.error('関連付けの解除に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

// ファイルをシーンに関連付け
async function associateFileWithScene(fileType, fileId) {
    try {
        Loading.show('ファイルを関連付け中...');
        
        const response = await API.post('api/media.php', {
            action: 'associate',
            project_id: AppState.currentProject.id,
            scene_id: AppState.currentScene.id,
            file_id: fileId,
            file_type: fileType
        });
        
        if (response.success) {
            // シーン情報を更新
            AppState.currentScene[`${fileType}_file_id`] = fileId;
            
            const fileTypeName = fileType === 'image' ? '画像' : '動画';
            Notification.success(`${fileTypeName}ファイルを関連付けました`);
            
            // シーン詳細モーダルを再表示
            showSceneDetailModal();
        } else {
            throw new Error(response.error?.message || 'ファイルの関連付けに失敗しました');
        }
        
    } catch (error) {
        Notification.error('ファイルの関連付けに失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}
/
**
 * シーン一覧画面の描画
 */
function renderSceneListView(scenes) {
    const mainContent = document.getElementById('main-content');
    
    const sceneListHTML = `
        <div class="scene-list-container">
            <!-- ツールバー -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-800">シーン一覧</h3>
                        <div class="flex items-center space-x-3">
                            <button id="upload-scenes-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                </svg>
                                シーンファイル
                            </button>
                            <button id="media-library-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-md hover:bg-primary-700 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                                メディアライブラリ
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- シーンテーブル -->
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">順序</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-20">サムネイル</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24">開始時間</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">歌詞</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">説明</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">プロンプト</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-20">操作</th>
                            </tr>
                        </thead>
                        <tbody id="scene-table-body" class="bg-white divide-y divide-gray-200">
                            <!-- シーン行がここに表示される -->
                        </tbody>
                    </table>
                </div>
                
                <!-- 新規シーン追加行 -->
                <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                    <button id="add-scene-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-primary-600 bg-primary-50 rounded-md hover:bg-primary-100 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        新しいシーンを追加
                    </button>
                </div>
            </div>
        </div>
    `;
    
    mainContent.innerHTML = `<div class="p-6">${sceneListHTML}</div>`;
    
    // シーン一覧を描画
    renderSceneRows(scenes);
    
    // イベントリスナーを設定
    setupSceneListEventListeners();
}

/**
 * シーン行の描画
 */
function renderSceneRows(scenes) {
    const tbody = document.getElementById('scene-table-body');
    
    if (!scenes || scenes.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="px-6 py-12 text-center text-gray-500">
                    <div class="flex flex-col items-center">
                        <svg class="w-12 h-12 mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <p>シーンがありません</p>
                        <p class="text-sm mt-1">「新しいシーンを追加」ボタンでシーンを作成してください</p>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    // シーンを順序でソート
    const sortedScenes = [...scenes].sort((a, b) => (a.order || 0) - (b.order || 0));
    
    const rowsHTML = sortedScenes.map((scene, index) => {
        const thumbnailUrl = scene.image_file_id 
            ? `data/projects/${AppState.currentProject.id}/media/images/${scene.image_file_id}`
            : null;
            
        return `
            <tr class="scene-row hover:bg-gray-50 transition-colors" 
                data-scene-id="${scene.id}" 
                data-scene-order="${scene.order || index + 1}"
                draggable="true">
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                        <svg class="w-4 h-4 text-gray-400 mr-2 drag-handle cursor-move" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                        </svg>
                        <span class="text-sm font-medium text-gray-900">${scene.order || index + 1}</span>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="w-12 h-12 bg-gray-200 rounded-lg overflow-hidden cursor-pointer scene-thumbnail" data-scene-id="${scene.id}">
                        ${thumbnailUrl ? 
                            `<img src="${thumbnailUrl}" alt="Scene ${scene.order || index + 1}" class="w-full h-full object-cover">` :
                            `<div class="w-full h-full flex items-center justify-center">
                                <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>`
                        }
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <input type="text" 
                           class="scene-field w-20 px-2 py-1 text-sm border border-transparent rounded hover:border-gray-300 focus:border-primary-500 focus:outline-none transition-colors" 
                           data-field="start_time" 
                           data-scene-id="${scene.id}"
                           value="${Utils.escapeHtml(scene.start_time || '0:00')}"
                           pattern="\\d+:\\d{2}">
                </td>
                <td class="px-6 py-4">
                    <textarea class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded hover:border-gray-300 focus:border-primary-500 focus:outline-none resize-none transition-colors" 
                              data-field="lyrics" 
                              data-scene-id="${scene.id}"
                              rows="2"
                              placeholder="歌詞を入力...">${Utils.escapeHtml(scene.lyrics || '')}</textarea>
                </td>
                <td class="px-6 py-4">
                    <textarea class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded hover:border-gray-300 focus:border-primary-500 focus:outline-none resize-none transition-colors" 
                              data-field="description" 
                              data-scene-id="${scene.id}"
                              rows="2"
                              placeholder="シーン説明を入力...">${Utils.escapeHtml(scene.description || '')}</textarea>
                </td>
                <td class="px-6 py-4">
                    <textarea class="scene-field w-full px-2 py-1 text-sm border border-transparent rounded hover:border-gray-300 focus:border-primary-500 focus:outline-none resize-none transition-colors" 
                              data-field="image_prompt" 
                              data-scene-id="${scene.id}"
                              rows="2"
                              placeholder="画像生成プロンプトを入力...">${Utils.escapeHtml(scene.image_prompt || '')}</textarea>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <button class="delete-scene-btn p-1 text-gray-400 hover:text-red-600 transition-colors" 
                            data-scene-id="${scene.id}" 
                            title="削除">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                </td>
            </tr>
        `;
    }).join('');
    
    tbody.innerHTML = rowsHTML;
    
    // ドラッグ&ドロップ機能を初期化
    initializeDragAndDrop();
    
    // インライン編集機能を初期化
    initializeInlineEditing();
}

/**
 * ドラッグ&ドロップ機能の初期化
 */
function initializeDragAndDrop() {
    const tbody = document.getElementById('scene-table-body');
    let draggedElement = null;
    let draggedSceneId = null;
    
    // 各シーン行にドラッグイベントを設定
    tbody.querySelectorAll('.scene-row').forEach(row => {
        // ドラッグ開始
        row.addEventListener('dragstart', function(e) {
            draggedElement = this;
            draggedSceneId = this.dataset.sceneId;
            
            // ドラッグ中の視覚的フィードバック
            this.classList.add('opacity-50');
            
            // ドラッグデータを設定
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.outerHTML);
        });
        
        // ドラッグ終了
        row.addEventListener('dragend', function(e) {
            this.classList.remove('opacity-50');
            
            // すべての行からドロップゾーンスタイルを削除
            tbody.querySelectorAll('.scene-row').forEach(r => {
                r.classList.remove('border-t-4', 'border-primary-500', 'border-b-4');
            });
        });
        
        // ドラッグオーバー
        row.addEventListener('dragover', function(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            if (this !== draggedElement) {
                // ドロップ位置の視覚的フィードバック
                const rect = this.getBoundingClientRect();
                const midpoint = rect.top + rect.height / 2;
                
                // すべての行からドロップゾーンスタイルを削除
                tbody.querySelectorAll('.scene-row').forEach(r => {
                    r.classList.remove('border-t-4', 'border-primary-500', 'border-b-4');
                });
                
                if (e.clientY < midpoint) {
                    // 上に挿入
                    this.classList.add('border-t-4', 'border-primary-500');
                } else {
                    // 下に挿入
                    this.classList.add('border-b-4', 'border-primary-500');
                }
            }
        });
        
        // ドラッグリーブ
        row.addEventListener('dragleave', function(e) {
            // 要素から完全に離れた場合のみスタイルを削除
            if (!this.contains(e.relatedTarget)) {
                this.classList.remove('border-t-4', 'border-primary-500', 'border-b-4');
            }
        });
        
        // ドロップ
        row.addEventListener('drop', function(e) {
            e.preventDefault();
            
            if (this !== draggedElement && draggedElement) {
                const rect = this.getBoundingClientRect();
                const midpoint = rect.top + rect.height / 2;
                
                // ドロップ位置を決定
                let insertBefore = e.clientY < midpoint;
                
                // DOM要素を移動
                if (insertBefore) {
                    this.parentNode.insertBefore(draggedElement, this);
                } else {
                    this.parentNode.insertBefore(draggedElement, this.nextSibling);
                }
                
                // 順序を更新
                updateSceneOrder();
            }
            
            // スタイルをクリーンアップ
            this.classList.remove('border-t-4', 'border-primary-500', 'border-b-4');
        });
    });
}

/**
 * シーンの順序を更新
 */
async function updateSceneOrder() {
    try {
        Loading.show('順序を更新中...');
        
        // 現在の行の順序を取得
        const rows = document.querySelectorAll('.scene-row');
        const sceneIds = Array.from(rows).map(row => row.dataset.sceneId);
        
        // APIで順序を更新
        const response = await API.post('api/scenes.php', {
            action: 'reorder',
            project_id: AppState.currentProject.id,
            scene_ids: sceneIds
        });
        
        if (response.success) {
            // 順序番号を更新
            rows.forEach((row, index) => {
                const orderCell = row.querySelector('td:first-child span');
                if (orderCell) {
                    orderCell.textContent = index + 1;
                }
                row.dataset.sceneOrder = index + 1;
            });
            
            Notification.success('シーンの順序を更新しました');
        } else {
            throw new Error(response.error?.message || '順序の更新に失敗しました');
        }
        
    } catch (error) {
        Notification.error('順序の更新に失敗しました: ' + error.message);
        
        // エラー時はシーン一覧を再読み込み
        await loadSceneListView(AppState.currentProject.id);
    } finally {
        Loading.hide();
    }
}

/**
 * インライン編集機能の初期化
 */
function initializeInlineEditing() {
    const sceneFields = document.querySelectorAll('.scene-field');
    
    sceneFields.forEach(field => {
        // フォーカス時の処理
        field.addEventListener('focus', function() {
            this.classList.add('border-primary-500', 'bg-white');
            this.classList.remove('border-transparent');
        });
        
        // フォーカス離脱時の自動保存
        field.addEventListener('blur', async function() {
            this.classList.remove('border-primary-500', 'bg-white');
            this.classList.add('border-transparent');
            
            const sceneId = this.dataset.sceneId;
            const fieldName = this.dataset.field;
            const value = this.value;
            
            // 時間フォーマットのバリデーション
            if (fieldName === 'start_time' && value && !/^\d+:\d{2}$/.test(value)) {
                Notification.error('時間は「分:秒」の形式で入力してください（例: 1:30）');
                this.focus();
                return;
            }
            
            await saveSceneField(sceneId, fieldName, value);
        });
        
        // Enterキーでの保存（テキストエリア以外）
        if (field.tagName !== 'TEXTAREA') {
            field.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    this.blur();
                }
            });
        }
    });
    
    // サムネイルクリックでシーン詳細画面を開く
    document.querySelectorAll('.scene-thumbnail').forEach(thumbnail => {
        thumbnail.addEventListener('click', function() {
            const sceneId = this.dataset.sceneId;
            openSceneDetail(sceneId);
        });
    });
    
    // 削除ボタンのイベント
    document.querySelectorAll('.delete-scene-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const sceneId = this.dataset.sceneId;
            confirmDeleteScene(sceneId);
        });
    });
}

/**
 * シーンフィールドの保存
 */
async function saveSceneField(sceneId, fieldName, value) {
    try {
        const response = await API.put(`api/scenes.php?id=${sceneId}`, {
            project_id: AppState.currentProject.id,
            [fieldName]: value
        });
        
        if (response.success) {
            // 保存成功の視覚的フィードバック
            const field = document.querySelector(`[data-scene-id="${sceneId}"][data-field="${fieldName}"]`);
            if (field) {
                field.classList.add('bg-green-50', 'border-green-300');
                setTimeout(() => {
                    field.classList.remove('bg-green-50', 'border-green-300');
                }, 1000);
            }
        } else {
            throw new Error(response.error?.message || 'フィールドの保存に失敗しました');
        }
        
    } catch (error) {
        Notification.error('保存に失敗しました: ' + error.message);
    }
}

/**
 * シーン一覧のイベントリスナー設定
 */
function setupSceneListEventListeners() {
    // 新規シーン追加ボタン
    const addSceneBtn = document.getElementById('add-scene-btn');
    if (addSceneBtn) {
        addSceneBtn.addEventListener('click', addNewScene);
    }
    
    // メディアライブラリボタン
    const mediaLibraryBtn = document.getElementById('media-library-btn');
    if (mediaLibraryBtn) {
        mediaLibraryBtn.addEventListener('click', showMediaLibrary);
    }
    
    // シーンファイルアップロードボタン
    const uploadScenesBtn = document.getElementById('upload-scenes-btn');
    if (uploadScenesBtn) {
        uploadScenesBtn.addEventListener('click', showSceneFileUploadModal);
    }
}

/**
 * 新規シーン追加
 */
async function addNewScene() {
    try {
        Loading.show('シーンを追加中...');
        
        const response = await API.post('api/scenes.php', {
            project_id: AppState.currentProject.id,
            start_time: '0:00',
            lyrics: '',
            description: '',
            image_prompt: '',
            video_prompt: ''
        });
        
        if (response.success) {
            Notification.success('新しいシーンを追加しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(response.error?.message || 'シーンの追加に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの追加に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン削除の確認
 */
function confirmDeleteScene(sceneId) {
    if (confirm('このシーンを削除しますか？この操作は取り消せません。')) {
        deleteScene(sceneId);
    }
}

/**
 * シーン削除
 */
async function deleteScene(sceneId) {
    try {
        Loading.show('シーンを削除中...');
        
        const response = await API.delete('api/scenes.php', {
            id: sceneId,
            project_id: AppState.currentProject.id
        });
        
        if (response.success) {
            Notification.success('シーンを削除しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(response.error?.message || 'シーンの削除に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンの削除に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集画面を開く
 */
async function openSceneDetail(sceneId) {
    try {
        Loading.show('シーン詳細を読み込み中...');
        
        // シーン情報を取得
        const response = await API.get('api/scenes.php', {
            project_id: AppState.currentProject.id,
            id: sceneId
        });
        
        if (response.success) {
            AppState.currentScene = response.data;
            showSceneDetailModal();
        } else {
            throw new Error(response.error?.message || 'シーン詳細の読み込みに失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーン詳細の読み込みに失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーン詳細編集モーダルを表示
 */
function showSceneDetailModal() {
    if (!AppState.currentScene) {
        Notification.error('シーン情報が読み込まれていません');
        return;
    }
    
    const scene = AppState.currentScene;
    const imageFileUrl = scene.image_file_id 
        ? `data/projects/${AppState.currentProject.id}/media/images/${scene.image_file_id}`
        : null;
    const videoFileUrl = scene.video_file_id 
        ? `data/projects/${AppState.currentProject.id}/media/videos/${scene.video_file_id}`
        : null;
    
    const modalContent = `
        <form id="scene-detail-form">
            <div class="space-y-6">
                <!-- 基本情報 -->
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">開始時間</label>
                        <input type="text" id="scene-start-time" name="start_time" 
                               value="${Utils.escapeHtml(scene.start_time || '0:00')}"
                               pattern="\\d+:\\d{2}"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                               placeholder="例: 1:30">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">シーン番号</label>
                        <input type="text" value="${scene.order || 1}" disabled
                               class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500">
                    </div>
                </div>
                
                <!-- 歌詞 -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">歌詞</label>
                    <textarea id="scene-lyrics" name="lyrics" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              placeholder="歌詞を入力してください">${Utils.escapeHtml(scene.lyrics || '')}</textarea>
                </div>
                
                <!-- シーン説明 -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">シーン説明</label>
                    <textarea id="scene-description" name="description" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              placeholder="シーンの説明を入力してください">${Utils.escapeHtml(scene.description || '')}</textarea>
                </div>
                
                <!-- 画像生成プロンプト -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">画像生成プロンプト</label>
                    <textarea id="scene-image-prompt" name="image_prompt" rows="4"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              placeholder="画像生成用のプロンプトを入力してください">${Utils.escapeHtml(scene.image_prompt || '')}</textarea>
                </div>
                
                <!-- 画像ファイル -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">関連付けられた画像</label>
                    <div class="border border-gray-300 rounded-md p-4">
                        ${imageFileUrl ? `
                            <div class="flex items-center space-x-4">
                                <img src="${imageFileUrl}" alt="Scene Image" class="w-20 h-20 object-cover rounded-md">
                                <div class="flex-1">
                                    <p class="text-sm font-medium text-gray-900">${scene.image_file_id}</p>
                                    <button type="button" onclick="removeFileAssociation('image')" 
                                            class="text-sm text-red-600 hover:text-red-800 transition-colors">
                                        関連付けを解除
                                    </button>
                                </div>
                            </div>
                        ` : `
                            <div class="text-center py-4">
                                <svg class="w-12 h-12 mx-auto text-gray-300 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                <p class="text-sm text-gray-500 mb-2">画像が関連付けられていません</p>
                                <button type="button" onclick="showMediaLibrary()" 
                                        class="text-sm text-primary-600 hover:text-primary-800 transition-colors">
                                    メディアライブラリから選択
                                </button>
                            </div>
                        `}
                    </div>
                </div>
                
                <!-- 動画生成プロンプト -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">動画生成プロンプト</label>
                    <textarea id="scene-video-prompt" name="video_prompt" rows="4"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              placeholder="動画生成用のプロンプトを入力してください">${Utils.escapeHtml(scene.video_prompt || '')}</textarea>
                </div>
                
                <!-- 動画ファイル -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">関連付けられた動画</label>
                    <div class="border border-gray-300 rounded-md p-4">
                        ${videoFileUrl ? `
                            <div class="flex items-center space-x-4">
                                <video src="${videoFileUrl}" class="w-20 h-20 object-cover rounded-md" controls></video>
                                <div class="flex-1">
                                    <p class="text-sm font-medium text-gray-900">${scene.video_file_id}</p>
                                    <button type="button" onclick="removeFileAssociation('video')" 
                                            class="text-sm text-red-600 hover:text-red-800 transition-colors">
                                        関連付けを解除
                                    </button>
                                </div>
                            </div>
                        ` : `
                            <div class="text-center py-4">
                                <svg class="w-12 h-12 mx-auto text-gray-300 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                <p class="text-sm text-gray-500 mb-2">動画が関連付けられていません</p>
                                <button type="button" onclick="showMediaLibrary()" 
                                        class="text-sm text-primary-600 hover:text-primary-800 transition-colors">
                                    メディアライブラリから選択
                                </button>
                            </div>
                        `}
                    </div>
                </div>
                
                <!-- ボタン -->
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        キャンセル
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 transition-colors">
                        保存
                    </button>
                </div>
            </div>
        </form>
    `;
    
    Modal.create(`シーン詳細編集 - シーン ${scene.order || 1}`, modalContent, 'max-w-3xl');
    
    // フォーム送信イベント
    document.getElementById('scene-detail-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        await saveSceneDetail();
    });
}

/**
 * シーン詳細の保存
 */
async function saveSceneDetail() {
    try {
        Loading.show('シーン詳細を保存中...');
        
        const formData = new FormData(document.getElementById('scene-detail-form'));
        const sceneData = {
            project_id: AppState.currentProject.id,
            start_time: formData.get('start_time'),
            lyrics: formData.get('lyrics'),
            description: formData.get('description'),
            image_prompt: formData.get('image_prompt'),
            video_prompt: formData.get('video_prompt')
        };
        
        // 時間フォーマットのバリデーション
        if (sceneData.start_time && !/^\d+:\d{2}$/.test(sceneData.start_time)) {
            Notification.error('時間は「分:秒」の形式で入力してください（例: 1:30）');
            return;
        }
        
        const response = await API.put(`api/scenes.php?id=${AppState.currentScene.id}`, sceneData);
        
        if (response.success) {
            Modal.close();
            Notification.success('シーン詳細を保存しました');
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(response.error?.message || 'シーン詳細の保存に失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーン詳細の保存に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * シーンファイルアップロードモーダルを表示
 */
function showSceneFileUploadModal() {
    const modalContent = `
        <form id="scene-file-upload-form" enctype="multipart/form-data">
            <div class="space-y-6">
                <div class="text-center">
                    <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                    </svg>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">シーンファイルをアップロード</h3>
                    <p class="text-sm text-gray-600">テキストファイルまたはCSVファイルから複数のシーンを一括登録できます</p>
                </div>
                
                <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                    <h4 class="text-sm font-medium text-blue-800 mb-2">対応ファイル形式</h4>
                    <ul class="text-sm text-blue-700 space-y-1">
                        <li><strong>テキストファイル (.txt)</strong>: 歌詞を改行で区切ったシンプルな形式</li>
                        <li><strong>CSVファイル (.csv)</strong>: 開始時間,歌詞,説明,画像プロンプト,動画プロンプトの形式</li>
                    </ul>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">ファイル選択</label>
                    <input type="file" id="scene-file-input" name="file" accept=".txt,.csv,.xlsx,.xls" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                </div>
                
                <div id="file-preview" class="hidden">
                    <label class="block text-sm font-medium text-gray-700 mb-2">プレビュー</label>
                    <div class="bg-gray-50 border border-gray-200 rounded-md p-4 max-h-40 overflow-y-auto">
                        <pre id="file-content" class="text-sm text-gray-700 whitespace-pre-wrap"></pre>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        キャンセル
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 transition-colors">
                        アップロード
                    </button>
                </div>
            </div>
        </form>
    `;
    
    Modal.create('シーンファイルアップロード', modalContent);
    
    // ファイル選択時のプレビュー
    document.getElementById('scene-file-input').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const content = e.target.result;
                document.getElementById('file-content').textContent = content.substring(0, 500) + (content.length > 500 ? '...' : '');
                document.getElementById('file-preview').classList.remove('hidden');
            };
            reader.readAsText(file);
        } else {
            document.getElementById('file-preview').classList.add('hidden');
        }
    });
    
    // フォーム送信イベント
    document.getElementById('scene-file-upload-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        await uploadSceneFile();
    });
}

/**
 * シーンファイルのアップロード
 */
async function uploadSceneFile() {
    try {
        Loading.show('シーンファイルをアップロード中...');
        
        const formData = new FormData();
        const fileInput = document.getElementById('scene-file-input');
        const file = fileInput.files[0];
        
        if (!file) {
            Notification.error('ファイルを選択してください');
            return;
        }
        
        formData.append('file', file);
        formData.append('project_id', AppState.currentProject.id);
        
        const response = await fetch('api/scenes.php?action=upload', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            Modal.close();
            Notification.success(`${result.data.length}個のシーンを追加しました`);
            
            // シーン一覧を再読み込み
            await loadSceneListView(AppState.currentProject.id);
        } else {
            throw new Error(result.error?.message || 'シーンファイルのアップロードに失敗しました');
        }
        
    } catch (error) {
        Notification.error('シーンファイルのアップロードに失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * プロジェクト編集モーダルを表示
 */
async function showEditProjectModal(projectId) {
    try {
        Loading.show('プロジェクト情報を読み込み中...');
        
        // プロジェクト情報を取得
        const response = await API.get('api/projects.php', { id: projectId });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'プロジェクト情報の読み込みに失敗しました');
        }
        
        const project = response.data;
        
        const modalContent = `
            <form id="edit-project-form">
                <div class="space-y-4">
                    <div>
                        <label for="edit-project-name" class="block text-sm font-medium text-gray-700 mb-2">楽曲名</label>
                        <input type="text" id="edit-project-name" name="name" required
                               value="${Utils.escapeHtml(project.name)}"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                               placeholder="楽曲名を入力してください">
                    </div>
                    <div>
                        <label for="edit-project-notes" class="block text-sm font-medium text-gray-700 mb-2">備考</label>
                        <textarea id="edit-project-notes" name="notes" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                  placeholder="備考を入力してください（任意）">${Utils.escapeHtml(project.notes || '')}</textarea>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="Modal.close()" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                            キャンセル
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 transition-colors">
                            更新
                        </button>
                    </div>
                </div>
            </form>
        `;
        
        Modal.create('プロジェクト編集', modalContent);
        
        // フォーム送信イベント
        document.getElementById('edit-project-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const projectData = {
                name: formData.get('name'),
                notes: formData.get('notes') || ''
            };
            
            try {
                Loading.show('プロジェクトを更新中...');
                
                const updateResponse = await API.put(`api/projects.php?id=${projectId}`, projectData);
                
                if (updateResponse.success) {
                    Modal.close();
                    Notification.success('プロジェクトを更新しました');
                    
                    // プロジェクト一覧を再読み込み
                    await loadProjectList();
                    
                    // 現在のプロジェクトが更新された場合はタイトルも更新
                    if (AppState.currentProject && AppState.currentProject.id === projectId) {
                        AppState.currentProject.name = projectData.name;
                        AppState.currentProject.notes = projectData.notes;
                        updatePageTitle(projectData.name);
                    }
                } else {
                    throw new Error(updateResponse.error?.message || 'プロジェクトの更新に失敗しました');
                }
                
            } catch (error) {
                Notification.error(error.message || 'プロジェクトの更新に失敗しました');
            } finally {
                Loading.hide();
            }
        });
        
        // 楽曲名フィールドにフォーカス
        setTimeout(() => {
            document.getElementById('edit-project-name').focus();
        }, 100);
        
    } catch (error) {
        Notification.error(error.message || 'プロジェクト情報の読み込みに失敗しました');
    } finally {
        Loading.hide();
    }
}

/**
 * プロジェクト削除確認モーダルを表示
 */
async function showDeleteProjectConfirm(projectId) {
    try {
        Loading.show('プロジェクト情報を読み込み中...');
        
        // プロジェクト情報を取得
        const response = await API.get('api/projects.php', { id: projectId });
        
        if (!response.success) {
            throw new Error(response.error?.message || 'プロジェクト情報の読み込みに失敗しました');
        }
        
        const project = response.data;
        
        const modalContent = `
            <div class="space-y-4">
                <div class="flex items-center space-x-3">
                    <div class="flex-shrink-0">
                        <svg class="w-10 h-10 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">プロジェクトを削除</h3>
                        <p class="text-sm text-gray-600">この操作は取り消せません</p>
                    </div>
                </div>
                
                <div class="bg-red-50 border border-red-200 rounded-md p-4">
                    <p class="text-sm text-red-800">
                        <strong>「${Utils.escapeHtml(project.name)}」</strong>を削除しようとしています。<br>
                        このプロジェクトに関連するすべてのシーンとメディアファイルも削除されます。
                    </p>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="Modal.close()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        キャンセル
                    </button>
                    <button type="button" onclick="deleteProject('${projectId}')" 
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 transition-colors">
                        削除する
                    </button>
                </div>
            </div>
        `;
        
        Modal.create('プロジェクト削除の確認', modalContent);
        
    } catch (error) {
        Notification.error(error.message || 'プロジェクト情報の読み込みに失敗しました');
    } finally {
        Loading.hide();
    }
}

/**
 * プロジェクト削除
 */
async function deleteProject(projectId) {
    try {
        Loading.show('プロジェクトを削除中...');
        
        const response = await API.delete('api/projects.php', { id: projectId });
        
        if (response.success) {
            Modal.close();
            Notification.success('プロジェクトを削除しました');
            
            // 削除されたプロジェクトが現在選択中の場合はクリア
            if (AppState.currentProject && AppState.currentProject.id === projectId) {
                AppState.currentProject = null;
                updatePageTitle('プロジェクトを選択してください');
                
                // ウェルカム画面を表示
                const mainContent = document.getElementById('main-content');
                mainContent.innerHTML = `
                    <div class="p-6">
                        <div id="welcome-screen" class="text-center py-20">
                            <div class="max-w-md mx-auto">
                                <div class="mb-8">
                                    <svg class="w-20 h-20 mx-auto text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                    </svg>
                                </div>
                                <h3 class="text-2xl font-semibold text-gray-800 mb-4">ミュージックビデオ作成ツール</h3>
                                <p class="text-gray-600 mb-8 leading-relaxed">
                                    左のメニューからプロジェクトを選択するか、<br>
                                    新しいプロジェクトを作成して始めましょう。
                                </p>
                                <button id="get-started-btn" class="inline-flex items-center px-6 py-3 text-base font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                    </svg>
                                    新しいプロジェクトを作成
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                // イベントリスナーを再設定
                const getStartedBtn = document.getElementById('get-started-btn');
                if (getStartedBtn) {
                    getStartedBtn.addEventListener('click', showCreateProjectModal);
                }
            }
            
            // プロジェクト一覧を再読み込み
            await loadProjectList();
            
        } else {
            throw new Error(response.error?.message || 'プロジェクトの削除に失敗しました');
        }
        
    } catch (error) {
        Notification.error(error.message || 'プロジェクトの削除に失敗しました');
    } finally {
        Loading.hide();
    }
}
/*
*
 * メディアライブラリを表示
 */
async function showMediaLibrary() {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    const modalContent = `
        <div class="media-library-container">
            <!-- フィルタータブ -->
            <div class="flex space-x-2 mb-4">
                <button id="filter-all" class="filter-btn active px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    全て
                </button>
                <button id="filter-image" class="filter-btn px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    画像のみ
                </button>
                <button id="filter-video" class="filter-btn px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    動画のみ
                </button>
            </div>
            
            <!-- アップロードエリア -->
            <div id="drop-zone" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center mb-6 transition-all">
                <div class="space-y-3">
                    <svg class="w-12 h-12 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                    </svg>
                    <div>
                        <p class="text-lg font-medium text-gray-700">ファイルをドロップしてアップロード</p>
                        <p class="text-sm text-gray-500 mt-1">または</p>
                    </div>
                    <button id="file-select-btn" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        ファイル選択
                    </button>
                    <input type="file" id="file-input" multiple accept="image/*,video/*" class="hidden">
                </div>
            </div>
            
            <!-- アップロード進捗 -->
            <div id="upload-progress" class="hidden mb-4">
                <div class="bg-gray-200 rounded-full h-2">
                    <div id="upload-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
                <p id="upload-status" class="text-sm text-gray-600 mt-2">アップロード中...</p>
            </div>
            
            <!-- ファイル一覧 -->
            <div class="flex-1 overflow-y-auto">
                <div id="media-grid" class="grid grid-cols-4 gap-4 min-h-64">
                    <!-- ファイルアイテムがここに表示される -->
                    <div class="flex items-center justify-center col-span-4 py-12">
                        <div class="text-center">
                            <svg class="w-12 h-12 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            <p class="text-gray-500">読み込み中...</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- フッター -->
            <div class="flex justify-between items-center pt-4 border-t border-gray-200 mt-4">
                <div id="selection-info" class="text-sm text-gray-600">
                    ファイルが選択されていません
                </div>
                <div class="space-x-2">
                    <button id="delete-selected-btn" class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        削除
                    </button>
                    <button onclick="Modal.close()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        閉じる
                    </button>
                </div>
            </div>
        </div>
    `;
    
    Modal.create('メディアライブラリ', modalContent, 'max-w-4xl');
    
    // メディアライブラリの初期化
    await initializeMediaLibrary();
}

/**
 * メディアライブラリの初期化
 */
async function initializeMediaLibrary() {
    // 現在のフィルター状態
    let currentFilter = 'all';
    let selectedFiles = new Set();
    
    // ファイル一覧を読み込み
    await loadMediaFiles(currentFilter);
    
    // フィルターボタンのイベントリスナー
    document.getElementById('filter-all').addEventListener('click', () => setFilter('all'));
    document.getElementById('filter-image').addEventListener('click', () => setFilter('image'));
    document.getElementById('filter-video').addEventListener('click', () => setFilter('video'));
    
    // ファイル選択ボタン
    document.getElementById('file-select-btn').addEventListener('click', () => {
        document.getElementById('file-input').click();
    });
    
    // ファイル入力の変更
    document.getElementById('file-input').addEventListener('change', handleFileSelect);
    
    // ドラッグ&ドロップ
    const dropZone = document.getElementById('drop-zone');
    
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('drag-over');
    });
    
    dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        if (!dropZone.contains(e.relatedTarget)) {
            dropZone.classList.remove('drag-over');
        }
    });
    
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('drag-over');
        handleFileDrop(e);
    });
    
    // 削除ボタン
    document.getElementById('delete-selected-btn').addEventListener('click', handleDeleteSelected);
    
    // フィルター設定関数
    async function setFilter(filter) {
        currentFilter = filter;
        
        // フィルターボタンの状態更新
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`filter-${filter}`).classList.add('active');
        
        // ファイル一覧を再読み込み
        await loadMediaFiles(filter);
    }
    
    // ファイル一覧読み込み
    async function loadMediaFiles(filter = 'all') {
        try {
            const response = await API.get('api/media.php', {
                project_id: AppState.currentProject.id,
                filter: filter
            });
            
            if (response.success) {
                renderMediaFiles(response.data || []);
            } else {
                throw new Error(response.error?.message || 'ファイル一覧の読み込みに失敗しました');
            }
        } catch (error) {
            Notification.error('ファイル一覧の読み込みに失敗しました');
            renderMediaFiles([]);
        }
    }
    
    // ファイル一覧の描画
    function renderMediaFiles(files) {
        const mediaGrid = document.getElementById('media-grid');
        
        if (!files || files.length === 0) {
            mediaGrid.innerHTML = `
                <div class="flex items-center justify-center col-span-4 py-12 empty-state">
                    <div class="text-center">
                        <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <h4 class="text-lg font-medium text-gray-700 mb-2">ファイルがありません</h4>
                        <p class="text-gray-500">ファイルをアップロードしてください</p>
                    </div>
                </div>
            `;
            return;
        }
        
        const filesHTML = files.map(file => {
            const isImage = file.type.startsWith('image/');
            const isVideo = file.type.startsWith('video/');
            const fileUrl = `data/projects/${AppState.currentProject.id}/media/${isImage ? 'images' : 'videos'}/${file.id}`;
            
            return `
                <div class="media-item border-2 border-gray-200 rounded-lg overflow-hidden cursor-pointer transition-all hover:shadow-lg" 
                     data-file-id="${file.id}" data-file-type="${isImage ? 'image' : 'video'}">
                    <div class="aspect-square bg-gray-100 relative">
                        ${isImage ? `
                            <img src="${fileUrl}" alt="${file.name}" class="w-full h-full object-cover">
                        ` : `
                            <div class="w-full h-full bg-gray-800 flex items-center justify-center relative">
                                <video src="${fileUrl}" class="w-full h-full object-cover" muted></video>
                                <div class="absolute inset-0 flex items-center justify-center">
                                    <svg class="w-12 h-12 text-white opacity-80" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M8 5v14l11-7z"/>
                                    </svg>
                                </div>
                            </div>
                        `}
                        
                        <!-- ファイルタイプバッジ -->
                        <div class="absolute top-1 left-1 px-2 py-1 text-xs font-semibold text-white bg-black bg-opacity-60 rounded">
                            ${isImage ? 'IMG' : 'VID'}
                        </div>
                        
                        <!-- 選択オーバーレイ -->
                        <div class="selected-overlay absolute inset-0 bg-blue-600 bg-opacity-30 flex items-center justify-center opacity-0 transition-opacity">
                            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                            </svg>
                        </div>
                    </div>
                    
                    <!-- ファイル情報 -->
                    <div class="p-3">
                        <p class="text-sm font-medium text-gray-900 truncate" title="${file.name}">${file.name}</p>
                        <div class="flex justify-between items-center mt-1">
                            <span class="text-xs text-gray-500">${Utils.formatFileSize(file.size)}</span>
                            <span class="text-xs text-gray-500">${Utils.formatDate(file.updated_at)}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        mediaGrid.innerHTML = filesHTML;
        
        // ファイルアイテムのクリックイベント
        mediaGrid.querySelectorAll('.media-item').forEach(item => {
            item.addEventListener('click', function() {
                const fileId = this.dataset.fileId;
                toggleFileSelection(fileId, this);
            });
        });
    }
    
    // ファイル選択の切り替え
    function toggleFileSelection(fileId, element) {
        if (selectedFiles.has(fileId)) {
            selectedFiles.delete(fileId);
            element.classList.remove('selected');
        } else {
            selectedFiles.add(fileId);
            element.classList.add('selected');
        }
        
        updateSelectionInfo();
    }
    
    // 選択情報の更新
    function updateSelectionInfo() {
        const selectionInfo = document.getElementById('selection-info');
        const deleteBtn = document.getElementById('delete-selected-btn');
        
        if (selectedFiles.size === 0) {
            selectionInfo.textContent = 'ファイルが選択されていません';
            deleteBtn.disabled = true;
        } else {
            selectionInfo.textContent = `${selectedFiles.size}個のファイルが選択されています`;
            deleteBtn.disabled = false;
        }
    }
    
    // ファイル選択処理
    function handleFileSelect(e) {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // ファイルドロップ処理
    function handleFileDrop(e) {
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            uploadFiles(files);
        }
    }
    
    // 選択されたファイルの削除
    async function handleDeleteSelected() {
        if (selectedFiles.size === 0) {
            return;
        }
        
        const fileCount = selectedFiles.size;
        if (!confirm(`選択された${fileCount}個のファイルを削除しますか？この操作は取り消せません。`)) {
            return;
        }
        
        try {
            Loading.show('ファイルを削除中...');
            
            const deletePromises = Array.from(selectedFiles).map(fileId => 
                API.delete('api/media.php', {
                    project_id: AppState.currentProject.id,
                    file_id: fileId
                })
            );
            
            const results = await Promise.all(deletePromises);
            const successCount = results.filter(r => r.success).length;
            const failCount = results.length - successCount;
            
            if (successCount > 0) {
                Notification.success(`${successCount}個のファイルを削除しました`);
            }
            
            if (failCount > 0) {
                Notification.error(`${failCount}個のファイルの削除に失敗しました`);
            }
            
            // 選択をクリア
            selectedFiles.clear();
            updateSelectionInfo();
            
            // ファイル一覧を再読み込み
            await loadMediaFiles(currentFilter);
            
        } catch (error) {
            Notification.error('ファイルの削除に失敗しました: ' + error.message);
        } finally {
            Loading.hide();
        }
    }
}

/**
 * ファイルアップロード処理
 */
async function uploadFiles(files) {
    if (!files || files.length === 0) {
        return;
    }
    
    // ファイルタイプの検証
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'video/mp4', 'video/mov', 'video/avi', 'video/webm'];
    const invalidFiles = files.filter(file => !allowedTypes.includes(file.type));
    
    if (invalidFiles.length > 0) {
        Notification.error(`サポートされていないファイル形式があります: ${invalidFiles.map(f => f.name).join(', ')}`);
        return;
    }
    
    // ファイルサイズの検証（100MB制限）
    const maxSize = 100 * 1024 * 1024; // 100MB
    const oversizedFiles = files.filter(file => file.size > maxSize);
    
    if (oversizedFiles.length > 0) {
        Notification.error(`ファイルサイズが大きすぎます（100MB制限）: ${oversizedFiles.map(f => f.name).join(', ')}`);
        return;
    }
    
    try {
        // 進捗表示を開始
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const statusText = document.getElementById('upload-status');
        
        progressContainer.classList.remove('hidden');
        progressBar.style.width = '0%';
        statusText.textContent = `${files.length}個のファイルをアップロード中...`;
        
        let completedCount = 0;
        const totalFiles = files.length;
        
        // 並列アップロード
        const uploadPromises = files.map(async (file, index) => {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('project_id', AppState.currentProject.id);
            
            try {
                const response = await fetch('api/media.php', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    completedCount++;
                    const progress = (completedCount / totalFiles) * 100;
                    progressBar.style.width = `${progress}%`;
                    statusText.textContent = `${completedCount}/${totalFiles} ファイル完了`;
                    
                    return { success: true, file: file.name };
                } else {
                    throw new Error(result.error?.message || 'アップロードに失敗しました');
                }
            } catch (error) {
                return { success: false, file: file.name, error: error.message };
            }
        });
        
        const results = await Promise.all(uploadPromises);
        
        // 結果の集計
        const successCount = results.filter(r => r.success).length;
        const failCount = results.length - successCount;
        
        // 進捗表示を隠す
        progressContainer.classList.add('hidden');
        
        // 結果通知
        if (successCount > 0) {
            Notification.success(`${successCount}個のファイルをアップロードしました`);
        }
        
        if (failCount > 0) {
            const failedFiles = results.filter(r => !r.success).map(r => r.file).join(', ');
            Notification.error(`${failCount}個のファイルのアップロードに失敗しました: ${failedFiles}`);
        }
        
        // ファイル一覧を再読み込み
        const currentFilter = document.querySelector('.filter-btn.active').id.replace('filter-', '');
        await loadMediaFiles(currentFilter);
        
        // ファイル入力をクリア
        const fileInput = document.getElementById('file-input');
        if (fileInput) {
            fileInput.value = '';
        }
        
    } catch (error) {
        // 進捗表示を隠す
        document.getElementById('upload-progress').classList.add('hidden');
        Notification.error('ファイルのアップロードに失敗しました: ' + error.message);
    }
}

/**
 * メディアファイルをシーンに関連付け
 */
async function associateFileWithScene(fileId, fileType) {
    if (!AppState.currentScene) {
        Notification.error('シーンが選択されていません');
        return;
    }
    
    try {
        Loading.show('ファイルを関連付け中...');
        
        const response = await API.put(`api/scenes.php?id=${AppState.currentScene.id}`, {
            project_id: AppState.currentProject.id,
            [`${fileType}_file_id`]: fileId
        });
        
        if (response.success) {
            // シーン情報を更新
            AppState.currentScene[`${fileType}_file_id`] = fileId;
            
            const fileTypeName = fileType === 'image' ? '画像' : '動画';
            Notification.success(`${fileTypeName}ファイルを関連付けました`);
            
            // モーダルを閉じる
            Modal.close();
            
            // シーン詳細モーダルを再表示（もし開いていれば）
            if (document.querySelector('.modal-backdrop')) {
                showSceneDetailModal();
            }
        } else {
            throw new Error(response.error?.message || 'ファイルの関連付けに失敗しました');
        }
        
    } catch (error) {
        Notification.error('ファイルの関連付けに失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * ファイル関連付けを解除
 */
async function removeFileAssociation(fileType) {
    if (!AppState.currentScene) {
        Notification.error('シーンが選択されていません');
        return;
    }
    
    const fileTypeName = fileType === 'image' ? '画像' : '動画';
    if (!confirm(`この${fileTypeName}ファイルの関連付けを解除しますか？`)) {
        return;
    }
    
    try {
        Loading.show('関連付けを解除中...');
        
        const response = await API.put(`api/scenes.php?id=${AppState.currentScene.id}`, {
            project_id: AppState.currentProject.id,
            [`${fileType}_file_id`]: null
        });
        
        if (response.success) {
            // シーン情報を更新
            AppState.currentScene[`${fileType}_file_id`] = null;
            
            Notification.success('ファイルの関連付けを解除しました');
            
            // シーン詳細モーダルを再表示
            showSceneDetailModal();
        } else {
            throw new Error(response.error?.message || '関連付けの解除に失敗しました');
        }
        
    } catch (error) {
        Notification.error('関連付けの解除に失敗しました: ' + error.message);
    } finally {
        Loading.hide();
    }
}

/**
 * ファイル選択モードでメディアライブラリを表示
 */
async function showMediaLibraryForSelection(fileType, callback) {
    if (!AppState.currentProject) {
        Notification.error('プロジェクトが選択されていません');
        return;
    }
    
    const fileTypeName = fileType === 'image' ? '画像' : '動画';
    const modalContent = `
        <div class="media-library-container">
            <div class="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md">
                <p class="text-sm text-blue-800">
                    <strong>${fileTypeName}ファイルを選択してください。</strong>
                    ファイルをクリックして選択し、「選択」ボタンを押してください。
                </p>
            </div>
            
            <!-- フィルタータブ -->
            <div class="flex space-x-2 mb-4">
                <button id="filter-all" class="filter-btn px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    全て
                </button>
                <button id="filter-${fileType}" class="filter-btn active px-4 py-2 text-sm font-medium rounded-md transition-colors">
                    ${fileTypeName}のみ
                </button>
            </div>
            
            <!-- ファイル一覧 -->
            <div class="flex-1 overflow-y-auto max-h-96">
                <div id="media-grid" class="grid grid-cols-4 gap-4 min-h-64">
                    <!-- ファイルアイテムがここに表示される -->
                    <div class="flex items-center justify-center col-span-4 py-12">
                        <div class="text-center">
                            <svg class="w-12 h-12 mx-auto text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            <p class="text-gray-500">読み込み中...</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- フッター -->
            <div class="flex justify-between items-center pt-4 border-t border-gray-200 mt-4">
                <div id="selection-info" class="text-sm text-gray-600">
                    ファイルが選択されていません
                </div>
                <div class="space-x-2">
                    <button onclick="Modal.close()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        キャンセル
                    </button>
                    <button id="select-file-btn" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        選択
                    </button>
                </div>
            </div>
        </div>
    `;
    
    Modal.create(`${fileTypeName}ファイル選択`, modalContent, 'max-w-4xl');
    
    // 選択モードでメディアライブラリを初期化
    await initializeMediaLibraryForSelection(fileType, callback);
}

/**
 * 選択モード用のメディアライブラリ初期化
 */
async function initializeMediaLibraryForSelection(fileType, callback) {
    let selectedFileId = null;
    
    // 初期フィルターを設定
    let currentFilter = fileType;
    await loadMediaFiles(currentFilter);
    
    // フィルターボタンのイベントリスナー
    document.getElementById('filter-all').addEventListener('click', () => setFilter('all'));
    document.getElementById(`filter-${fileType}`).addEventListener('click', () => setFilter(fileType));
    
    // 選択ボタン
    document.getElementById('select-file-btn').addEventListener('click', () => {
        if (selectedFileId && callback) {
            callback(selectedFileId);
            Modal.close();
        }
    });
    
    // フィルター設定関数
    async function setFilter(filter) {
        currentFilter = filter;
        
        // フィルターボタンの状態更新
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`filter-${filter}`).classList.add('active');
        
        // ファイル一覧を再読み込み
        await loadMediaFiles(filter);
    }
    
    // ファイル一覧読み込み
    async function loadMediaFiles(filter = 'all') {
        try {
            const response = await API.get('api/media.php', {
                project_id: AppState.currentProject.id,
                filter: filter
            });
            
            if (response.success) {
                renderMediaFiles(response.data || []);
            } else {
                throw new Error(response.error?.message || 'ファイル一覧の読み込みに失敗しました');
            }
        } catch (error) {
            Notification.error('ファイル一覧の読み込みに失敗しました');
            renderMediaFiles([]);
        }
    }
    
    // ファイル一覧の描画
    function renderMediaFiles(files) {
        const mediaGrid = document.getElementById('media-grid');
        
        if (!files || files.length === 0) {
            mediaGrid.innerHTML = `
                <div class="flex items-center justify-center col-span-4 py-12 empty-state">
                    <div class="text-center">
                        <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <h4 class="text-lg font-medium text-gray-700 mb-2">ファイルがありません</h4>
                        <p class="text-gray-500">メディアライブラリからファイルをアップロードしてください</p>
                    </div>
                </div>
            `;
            return;
        }
        
        const filesHTML = files.map(file => {
            const isImage = file.type.startsWith('image/');
            const isVideo = file.type.startsWith('video/');
            const fileUrl = `data/projects/${AppState.currentProject.id}/media/${isImage ? 'images' : 'videos'}/${file.id}`;
            
            return `
                <div class="media-item border-2 border-gray-200 rounded-lg overflow-hidden cursor-pointer transition-all hover:shadow-lg" 
                     data-file-id="${file.id}" data-file-type="${isImage ? 'image' : 'video'}">
                    <div class="aspect-square bg-gray-100 relative">
                        ${isImage ? `
                            <img src="${fileUrl}" alt="${file.name}" class="w-full h-full object-cover">
                        ` : `
                            <div class="w-full h-full bg-gray-800 flex items-center justify-center relative">
                                <video src="${fileUrl}" class="w-full h-full object-cover" muted></video>
                                <div class="absolute inset-0 flex items-center justify-center">
                                    <svg class="w-12 h-12 text-white opacity-80" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M8 5v14l11-7z"/>
                                    </svg>
                                </div>
                            </div>
                        `}
                        
                        <!-- ファイルタイプバッジ -->
                        <div class="absolute top-1 left-1 px-2 py-1 text-xs font-semibold text-white bg-black bg-opacity-60 rounded">
                            ${isImage ? 'IMG' : 'VID'}
                        </div>
                        
                        <!-- 選択オーバーレイ -->
                        <div class="selected-overlay absolute inset-0 bg-blue-600 bg-opacity-30 flex items-center justify-center opacity-0 transition-opacity">
                            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                            </svg>
                        </div>
                    </div>
                    
                    <!-- ファイル情報 -->
                    <div class="p-3">
                        <p class="text-sm font-medium text-gray-900 truncate" title="${file.name}">${file.name}</p>
                        <div class="flex justify-between items-center mt-1">
                            <span class="text-xs text-gray-500">${Utils.formatFileSize(file.size)}</span>
                            <span class="text-xs text-gray-500">${Utils.formatDate(file.updated_at)}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        mediaGrid.innerHTML = filesHTML;
        
        // ファイルアイテムのクリックイベント
        mediaGrid.querySelectorAll('.media-item').forEach(item => {
            item.addEventListener('click', function() {
                const fileId = this.dataset.fileId;
                selectFile(fileId, this);
            });
        });
    }
    
    // ファイル選択
    function selectFile(fileId, element) {
        // 他の選択を解除
        document.querySelectorAll('.media-item').forEach(item => {
            item.classList.remove('selected');
        });
        
        // 新しい選択を設定
        element.classList.add('selected');
        selectedFileId = fileId;
        
        updateSelectionInfo();
    }
    
    // 選択情報の更新
    function updateSelectionInfo() {
        const selectionInfo = document.getElementById('selection-info');
        const selectBtn = document.getElementById('select-file-btn');
        
        if (selectedFileId) {
            const selectedElement = document.querySelector(`[data-file-id="${selectedFileId}"]`);
            const fileName = selectedElement ? selectedElement.querySelector('p').textContent : 'ファイル';
            selectionInfo.textContent = `選択中: ${fileName}`;
            selectBtn.disabled = false;
        } else {
            selectionInfo.textContent = 'ファイルが選択されていません';
            selectBtn.disabled = true;
        }
    }
}

/**
 * エクスポート/インポート機能の初期化
 */
function initializeExportImport() {
    const exportBtn = document.getElementById('export-project-btn');
    const importBtn = document.getElementById('import-project-btn');
    
    // エクスポートボタンのイベント
    if (exportBtn) {
        exportBtn.addEventListener('click', handleProjectExport);
    }
    
    // インポートボタンのイベント
    if (importBtn) {
        importBtn.addEventListener('click', handleProjectImport);
    }
}

/**
 * プロジェクトのエクスポート処理
 */
function handleProjectExport() {
    if (!AppState.currentProject) {
        Notification.error('エクスポートするプロジェクトを選択してください');
        return;
    }
    
    // 確認ダイアログ
    if (!confirm(`プロジェクト「${AppState.currentProject.name}」をエクスポートしますか？`)) {
        return;
    }
    
    // エクスポート処理
    Loading.show('プロジェクトをエクスポート中...');
    
    // ダウンロード用のリンクを作成
    const downloadLink = document.createElement('a');
    downloadLink.href = `api/export.php?project_id=${AppState.currentProject.id}`;
    downloadLink.download = `${AppState.currentProject.name}_${new Date().toISOString().slice(0,10)}.zip`;
    downloadLink.style.display = 'none';
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    
    setTimeout(() => {
        Loading.hide();
        Notification.success('プロジェクトのエクスポートを開始しました');
    }, 1000);
}

/**
 * プロジェクトのインポート処理
 */
function handleProjectImport() {
    // ファイル選択用のinput要素を作成
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.zip';
    fileInput.style.display = 'none';
    
    fileInput.addEventListener('change', async function(e) {
        const file = e.target.files[0];
        if (!file) {
            return;
        }
        
        // ファイルタイプの検証
        if (!file.name.toLowerCase().endsWith('.zip')) {
            Notification.error('ZIPファイルを選択してください');
            return;
        }
        
        // ファイルサイズの検証（500MB制限）
        const maxSize = 500 * 1024 * 1024;
        if (file.size > maxSize) {
            Notification.error('ファイルサイズが大きすぎます（500MB制限）');
            return;
        }
        
        try {
            Loading.show('プロジェクトをインポート中...');
            
            const formData = new FormData();
            formData.append('project_file', file);
            
            const response = await fetch('api/import.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                Notification.success(result.message || 'プロジェクトのインポートが完了しました');
                
                // プロジェクト一覧を再読み込み
                await loadProjectList();
                
                // インポートしたプロジェクトを選択
                if (result.project_id) {
                    selectProject(result.project_id);
                }
            } else {
                throw new Error(result.error || 'インポートに失敗しました');
            }
        } catch (error) {
            Notification.error('プロジェクトのインポートに失敗しました: ' + error.message);
        } finally {
            Loading.hide();
        }
    });
    
    document.body.appendChild(fileInput);
    fileInput.click();
    document.body.removeChild(fileInput);
}